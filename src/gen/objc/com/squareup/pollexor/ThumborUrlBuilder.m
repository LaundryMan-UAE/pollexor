//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/3rdParty/pollexor/src/main/java/com/squareup/pollexor/ThumborUrlBuilder.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/squareup/pollexor/ThumborEnums.h"
#include "com/squareup/pollexor/ThumborUrlBuilder.h"
#include "com/squareup/pollexor/Utilities.h"
#include "java/lang/CharSequence.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

static NSString *PXRThumborUrlBuilder_PREFIX_UNSAFE_ = @"unsafe/";
J2OBJC_STATIC_FIELD_GETTER(PXRThumborUrlBuilder, PREFIX_UNSAFE_, NSString *)

static NSString *PXRThumborUrlBuilder_PREFIX_META_ = @"meta/";
J2OBJC_STATIC_FIELD_GETTER(PXRThumborUrlBuilder, PREFIX_META_, NSString *)

static NSString *PXRThumborUrlBuilder_PART_SMART_ = @"smart";
J2OBJC_STATIC_FIELD_GETTER(PXRThumborUrlBuilder, PART_SMART_, NSString *)

static NSString *PXRThumborUrlBuilder_PART_TRIM_ = @"trim";
J2OBJC_STATIC_FIELD_GETTER(PXRThumborUrlBuilder, PART_TRIM_, NSString *)

static NSString *PXRThumborUrlBuilder_PART_FIT_IN_ = @"fit-in";
J2OBJC_STATIC_FIELD_GETTER(PXRThumborUrlBuilder, PART_FIT_IN_, NSString *)

static NSString *PXRThumborUrlBuilder_PART_FILTERS_ = @"filters";
J2OBJC_STATIC_FIELD_GETTER(PXRThumborUrlBuilder, PART_FILTERS_, NSString *)

static NSString *PXRThumborUrlBuilder_FILTER_BRIGHTNESS_ = @"brightness";
J2OBJC_STATIC_FIELD_GETTER(PXRThumborUrlBuilder, FILTER_BRIGHTNESS_, NSString *)

static NSString *PXRThumborUrlBuilder_FILTER_CONTRAST_ = @"contrast";
J2OBJC_STATIC_FIELD_GETTER(PXRThumborUrlBuilder, FILTER_CONTRAST_, NSString *)

static NSString *PXRThumborUrlBuilder_FILTER_NOISE_ = @"noise";
J2OBJC_STATIC_FIELD_GETTER(PXRThumborUrlBuilder, FILTER_NOISE_, NSString *)

static NSString *PXRThumborUrlBuilder_FILTER_QUALITY_ = @"quality";
J2OBJC_STATIC_FIELD_GETTER(PXRThumborUrlBuilder, FILTER_QUALITY_, NSString *)

static NSString *PXRThumborUrlBuilder_FILTER_RGB_ = @"rgb";
J2OBJC_STATIC_FIELD_GETTER(PXRThumborUrlBuilder, FILTER_RGB_, NSString *)

static NSString *PXRThumborUrlBuilder_FILTER_ROUND_CORNER_ = @"round_corner";
J2OBJC_STATIC_FIELD_GETTER(PXRThumborUrlBuilder, FILTER_ROUND_CORNER_, NSString *)

static NSString *PXRThumborUrlBuilder_FILTER_WATERMARK_ = @"watermark";
J2OBJC_STATIC_FIELD_GETTER(PXRThumborUrlBuilder, FILTER_WATERMARK_, NSString *)

static NSString *PXRThumborUrlBuilder_FILTER_SHARPEN_ = @"sharpen";
J2OBJC_STATIC_FIELD_GETTER(PXRThumborUrlBuilder, FILTER_SHARPEN_, NSString *)

static NSString *PXRThumborUrlBuilder_FILTER_FILL_ = @"fill";
J2OBJC_STATIC_FIELD_GETTER(PXRThumborUrlBuilder, FILTER_FILL_, NSString *)

static NSString *PXRThumborUrlBuilder_FILTER_FORMAT_ = @"format";
J2OBJC_STATIC_FIELD_GETTER(PXRThumborUrlBuilder, FILTER_FORMAT_, NSString *)

static NSString *PXRThumborUrlBuilder_FILTER_FRAME_ = @"frame";
J2OBJC_STATIC_FIELD_GETTER(PXRThumborUrlBuilder, FILTER_FRAME_, NSString *)

static NSString *PXRThumborUrlBuilder_FILTER_STRIP_ICC_ = @"strip_icc";
J2OBJC_STATIC_FIELD_GETTER(PXRThumborUrlBuilder, FILTER_STRIP_ICC_, NSString *)

static NSString *PXRThumborUrlBuilder_FILTER_GRAYSCALE_ = @"grayscale";
J2OBJC_STATIC_FIELD_GETTER(PXRThumborUrlBuilder, FILTER_GRAYSCALE_, NSString *)

static NSString *PXRThumborUrlBuilder_FILTER_EQUALIZE_ = @"equalize";
J2OBJC_STATIC_FIELD_GETTER(PXRThumborUrlBuilder, FILTER_EQUALIZE_, NSString *)

static NSString *PXRThumborUrlBuilder_FILTER_BLUR_ = @"blur";
J2OBJC_STATIC_FIELD_GETTER(PXRThumborUrlBuilder, FILTER_BLUR_, NSString *)

static NSString *PXRThumborUrlBuilder_FILTER_NO_UPSCALE_ = @"no_upscale";
J2OBJC_STATIC_FIELD_GETTER(PXRThumborUrlBuilder, FILTER_NO_UPSCALE_, NSString *)

static NSString *PXRThumborUrlBuilder_FILTER_ROTATE_ = @"rotate";
J2OBJC_STATIC_FIELD_GETTER(PXRThumborUrlBuilder, FILTER_ROTATE_, NSString *)

@implementation PXRThumborUrlBuilder

- (instancetype)initWithNSString:(NSString *)host
                    withNSString:(NSString *)key
                    withNSString:(NSString *)image {
  PXRThumborUrlBuilder_initWithNSString_withNSString_withNSString_(self, host, key, image);
  return self;
}

- (PXRThumborUrlBuilder *)resizeWithInt:(jint)width
                                withInt:(jint)height {
  if (width < 0 && width != PXRThumborUrlBuilder_ORIGINAL_SIZE) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Width must be a positive number.") autorelease];
  }
  if (height < 0 && height != PXRThumborUrlBuilder_ORIGINAL_SIZE) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Height must be a positive number.") autorelease];
  }
  if (width == 0 && height == 0) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Both width and height must not be zero.") autorelease];
  }
  hasResize_ = YES;
  resizeWidth_ = width;
  resizeHeight_ = height;
  return self;
}

- (PXRThumborUrlBuilder *)flipHorizontally {
  if (!hasResize_) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(@"Image must be resized first in order to flip.") autorelease];
  }
  flipHorizontally_ = YES;
  return self;
}

- (PXRThumborUrlBuilder *)flipVertically {
  if (!hasResize_) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(@"Image must be resized first in order to flip.") autorelease];
  }
  flipVertically_ = YES;
  return self;
}

- (PXRThumborUrlBuilder *)fitIn {
  if (!hasResize_) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(@"Image must be resized first in order to apply 'fit-in'.") autorelease];
  }
  fitIn_ = YES;
  return self;
}

- (PXRThumborUrlBuilder *)cropWithInt:(jint)top
                              withInt:(jint)left
                              withInt:(jint)bottom
                              withInt:(jint)right {
  if (top < 0) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Top must be greater or equal to zero.") autorelease];
  }
  if (left < 0) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Left must be greater or equal to zero.") autorelease];
  }
  if (bottom < 1 || bottom <= top) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Bottom must be greater than zero and top.") autorelease];
  }
  if (right < 1 || right <= left) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Right must be greater than zero and left.") autorelease];
  }
  hasCrop_ = YES;
  cropTop_ = top;
  cropLeft_ = left;
  cropBottom_ = bottom;
  cropRight_ = right;
  return self;
}

- (PXRThumborUrlBuilder *)alignWithPXRThumborEnums_HorizontalAlignEnum:(PXRThumborEnums_HorizontalAlignEnum *)align {
  if (!hasResize_) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(@"Image must be resized first in order to align.") autorelease];
  }
  PXRThumborUrlBuilder_set_cropHorizontalAlign_(self, align);
  return self;
}

- (PXRThumborUrlBuilder *)alignWithPXRThumborEnums_VerticalAlignEnum:(PXRThumborEnums_VerticalAlignEnum *)align {
  if (!hasResize_) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(@"Image must be resized first in order to align.") autorelease];
  }
  PXRThumborUrlBuilder_set_cropVerticalAlign_(self, align);
  return self;
}

- (PXRThumborUrlBuilder *)alignWithPXRThumborEnums_VerticalAlignEnum:(PXRThumborEnums_VerticalAlignEnum *)valign
                             withPXRThumborEnums_HorizontalAlignEnum:(PXRThumborEnums_HorizontalAlignEnum *)halign {
  return [((PXRThumborUrlBuilder *) nil_chk([self alignWithPXRThumborEnums_VerticalAlignEnum:valign])) alignWithPXRThumborEnums_HorizontalAlignEnum:halign];
}

- (PXRThumborUrlBuilder *)smart {
  if (!hasResize_) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(@"Image must be resized first in order to smart align.") autorelease];
  }
  isSmart_ = YES;
  return self;
}

- (PXRThumborUrlBuilder *)trim {
  return [self trimWithPXRThumborEnums_TrimPixelColorEnum:nil];
}

- (PXRThumborUrlBuilder *)trimWithPXRThumborEnums_TrimPixelColorEnum:(PXRThumborEnums_TrimPixelColorEnum *)value {
  return [self trimWithPXRThumborEnums_TrimPixelColorEnum:value withInt:0];
}

- (PXRThumborUrlBuilder *)trimWithPXRThumborEnums_TrimPixelColorEnum:(PXRThumborEnums_TrimPixelColorEnum *)value
                                                             withInt:(jint)colorTolerance {
  if (colorTolerance < 0 || colorTolerance > 442) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Color tolerance must be between 0 and 442.") autorelease];
  }
  if (colorTolerance > 0 && value == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Trim pixel color value must not be null.") autorelease];
  }
  isTrim_ = YES;
  PXRThumborUrlBuilder_set_trimPixelColor_(self, value);
  trimColorTolerance_ = colorTolerance;
  return self;
}

- (PXRThumborUrlBuilder *)filterWithNSStringArray:(IOSObjectArray *)filters {
  if (((IOSObjectArray *) nil_chk(filters))->size_ == 0) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"You must provide at least one filter.") autorelease];
  }
  if (self->filters_ == nil) {
    PXRThumborUrlBuilder_setAndConsume_filters_(self, new_JavaUtilArrayList_initWithInt_(filters->size_));
  }
  {
    IOSObjectArray *a__ = filters;
    NSString * const *b__ = a__->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *filter = *b__++;
      if (filter == nil || ((jint) [filter length]) == 0) {
        @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Filter must not be blank.") autorelease];
      }
      [((id<JavaUtilList>) nil_chk(self->filters_)) addWithId:filter];
    }
  }
  return self;
}

- (NSString *)toUrl {
  return (key_ == nil) ? [self toUrlUnsafe] : [self toUrlSafe];
}

- (NSString *)toUrlUnsafe {
  return JreStrcat("$$@", host_, PXRThumborUrlBuilder_PREFIX_UNSAFE_, [self assembleConfigWithBoolean:NO]);
}

- (NSString *)toUrlSafe {
  if (key_ == nil) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(@"Cannot build safe URL without a key.") autorelease];
  }
  JavaLangStringBuilder *config = [self assembleConfigWithBoolean:NO];
  IOSByteArray *encrypted = PXRUtilities_hmacSha1WithJavaLangStringBuilder_withNSString_(config, key_);
  NSString *encoded = PXRUtilities_base64EncodeWithByteArray_(encrypted);
  id<JavaLangCharSequence> suffix = config;
  return JreStrcat("$$C@", host_, encoded, '/', suffix);
}

- (NSString *)toMeta {
  return (key_ == nil) ? [self toMetaUnsafe] : [self toMetaSafe];
}

- (NSString *)toMetaUnsafe {
  return JreStrcat("$@", host_, [self assembleConfigWithBoolean:YES]);
}

- (NSString *)toMetaSafe {
  JavaLangStringBuilder *config = [self assembleConfigWithBoolean:YES];
  IOSByteArray *encrypted = PXRUtilities_hmacSha1WithJavaLangStringBuilder_withNSString_(config, key_);
  NSString *encoded = PXRUtilities_base64EncodeWithByteArray_(encrypted);
  return JreStrcat("$$C@", host_, encoded, '/', config);
}

- (NSString *)description {
  return [self toUrl];
}

- (JavaLangStringBuilder *)assembleConfigWithBoolean:(jboolean)meta {
  JavaLangStringBuilder *builder = [new_JavaLangStringBuilder_init() autorelease];
  if (meta) {
    [builder appendWithNSString:PXRThumborUrlBuilder_PREFIX_META_];
  }
  if (isTrim_) {
    [builder appendWithNSString:PXRThumborUrlBuilder_PART_TRIM_];
    if (trimPixelColor_ != nil) {
      [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:@":"])) appendWithNSString:trimPixelColor_->value_];
      if (trimColorTolerance_ > 0) {
        [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:@":"])) appendWithInt:trimColorTolerance_];
      }
    }
    [builder appendWithNSString:@"/"];
  }
  if (hasCrop_) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([builder appendWithInt:cropLeft_])) appendWithNSString:@"x"])) appendWithInt:cropTop_])) appendWithNSString:@":"])) appendWithInt:cropRight_])) appendWithNSString:@"x"])) appendWithInt:cropBottom_];
    [builder appendWithNSString:@"/"];
  }
  if (hasResize_) {
    if (fitIn_) {
      [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:PXRThumborUrlBuilder_PART_FIT_IN_])) appendWithNSString:@"/"];
    }
    if (flipHorizontally_) {
      [builder appendWithNSString:@"-"];
    }
    if (resizeWidth_ == PXRThumborUrlBuilder_ORIGINAL_SIZE) {
      [builder appendWithNSString:@"orig"];
    }
    else {
      [builder appendWithInt:resizeWidth_];
    }
    [builder appendWithNSString:@"x"];
    if (flipVertically_) {
      [builder appendWithNSString:@"-"];
    }
    if (resizeHeight_ == PXRThumborUrlBuilder_ORIGINAL_SIZE) {
      [builder appendWithNSString:@"orig"];
    }
    else {
      [builder appendWithInt:resizeHeight_];
    }
    if (isSmart_) {
      [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:@"/"])) appendWithNSString:PXRThumborUrlBuilder_PART_SMART_];
    }
    else {
      if (cropHorizontalAlign_ != nil) {
        [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:@"/"])) appendWithNSString:cropHorizontalAlign_->value_];
      }
      if (cropVerticalAlign_ != nil) {
        [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:@"/"])) appendWithNSString:cropVerticalAlign_->value_];
      }
    }
    [builder appendWithNSString:@"/"];
  }
  if (filters_ != nil) {
    [builder appendWithNSString:PXRThumborUrlBuilder_PART_FILTERS_];
    for (NSString * __strong filter in filters_) {
      [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:@":"])) appendWithNSString:filter];
    }
    [builder appendWithNSString:@"/"];
  }
  [builder appendWithNSString:image_];
  return builder;
}

+ (NSString *)brightnessWithInt:(jint)amount {
  return PXRThumborUrlBuilder_brightnessWithInt_(amount);
}

+ (NSString *)contrastWithInt:(jint)amount {
  return PXRThumborUrlBuilder_contrastWithInt_(amount);
}

+ (NSString *)noiseWithInt:(jint)amount {
  return PXRThumborUrlBuilder_noiseWithInt_(amount);
}

+ (NSString *)qualityWithInt:(jint)amount {
  return PXRThumborUrlBuilder_qualityWithInt_(amount);
}

+ (NSString *)rgbWithInt:(jint)r
                 withInt:(jint)g
                 withInt:(jint)b {
  return PXRThumborUrlBuilder_rgbWithInt_withInt_withInt_(r, g, b);
}

+ (NSString *)roundCornerWithInt:(jint)radius {
  return PXRThumborUrlBuilder_roundCornerWithInt_(radius);
}

+ (NSString *)roundCornerWithInt:(jint)radius
                         withInt:(jint)color {
  return PXRThumborUrlBuilder_roundCornerWithInt_withInt_(radius, color);
}

+ (NSString *)roundCornerWithInt:(jint)radiusInner
                         withInt:(jint)radiusOuter
                         withInt:(jint)color {
  return PXRThumborUrlBuilder_roundCornerWithInt_withInt_withInt_(radiusInner, radiusOuter, color);
}

+ (NSString *)watermarkWithNSString:(NSString *)imageUrl {
  return PXRThumborUrlBuilder_watermarkWithNSString_(imageUrl);
}

+ (NSString *)watermarkWithPXRThumborUrlBuilder:(PXRThumborUrlBuilder *)image {
  return PXRThumborUrlBuilder_watermarkWithPXRThumborUrlBuilder_(image);
}

+ (NSString *)watermarkWithNSString:(NSString *)imageUrl
                            withInt:(jint)x
                            withInt:(jint)y {
  return PXRThumborUrlBuilder_watermarkWithNSString_withInt_withInt_(imageUrl, x, y);
}

+ (NSString *)watermarkWithPXRThumborUrlBuilder:(PXRThumborUrlBuilder *)image
                                        withInt:(jint)x
                                        withInt:(jint)y {
  return PXRThumborUrlBuilder_watermarkWithPXRThumborUrlBuilder_withInt_withInt_(image, x, y);
}

+ (NSString *)watermarkWithNSString:(NSString *)imageUrl
                            withInt:(jint)x
                            withInt:(jint)y
                            withInt:(jint)transparency {
  return PXRThumborUrlBuilder_watermarkWithNSString_withInt_withInt_withInt_(imageUrl, x, y, transparency);
}

+ (NSString *)watermarkWithPXRThumborUrlBuilder:(PXRThumborUrlBuilder *)image
                                        withInt:(jint)x
                                        withInt:(jint)y
                                        withInt:(jint)transparency {
  return PXRThumborUrlBuilder_watermarkWithPXRThumborUrlBuilder_withInt_withInt_withInt_(image, x, y, transparency);
}

+ (NSString *)sharpenWithFloat:(jfloat)amount
                     withFloat:(jfloat)radius
                   withBoolean:(jboolean)luminanceOnly {
  return PXRThumborUrlBuilder_sharpenWithFloat_withFloat_withBoolean_(amount, radius, luminanceOnly);
}

+ (NSString *)fillWithInt:(jint)color {
  return PXRThumborUrlBuilder_fillWithInt_(color);
}

+ (NSString *)formatWithPXRThumborEnums_ImageFormatEnum:(PXRThumborEnums_ImageFormatEnum *)format {
  return PXRThumborUrlBuilder_formatWithPXRThumborEnums_ImageFormatEnum_(format);
}

+ (NSString *)frameWithNSString:(NSString *)imageUrl {
  return PXRThumborUrlBuilder_frameWithNSString_(imageUrl);
}

+ (NSString *)stripicc {
  return PXRThumborUrlBuilder_stripicc();
}

+ (NSString *)grayscale {
  return PXRThumborUrlBuilder_grayscale();
}

+ (NSString *)equalize {
  return PXRThumborUrlBuilder_equalize();
}

+ (NSString *)blurWithInt:(jint)radius {
  return PXRThumborUrlBuilder_blurWithInt_(radius);
}

+ (NSString *)blurWithInt:(jint)radius
                  withInt:(jint)sigma {
  return PXRThumborUrlBuilder_blurWithInt_withInt_(radius, sigma);
}

+ (NSString *)noUpscale {
  return PXRThumborUrlBuilder_noUpscale();
}

+ (NSString *)rotateWithInt:(jint)angle {
  return PXRThumborUrlBuilder_rotateWithInt_(angle);
}

- (void)dealloc {
  RELEASE_(image_);
  RELEASE_(host_);
  RELEASE_(key_);
  RELEASE_(cropHorizontalAlign_);
  RELEASE_(cropVerticalAlign_);
  RELEASE_(trimPixelColor_);
  RELEASE_(filters_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:withNSString:", "ThumborUrlBuilder", NULL, 0x0, NULL, NULL },
    { "resizeWithInt:withInt:", "resize", "Lcom.squareup.pollexor.ThumborUrlBuilder;", 0x1, NULL, NULL },
    { "flipHorizontally", NULL, "Lcom.squareup.pollexor.ThumborUrlBuilder;", 0x1, NULL, NULL },
    { "flipVertically", NULL, "Lcom.squareup.pollexor.ThumborUrlBuilder;", 0x1, NULL, NULL },
    { "fitIn", NULL, "Lcom.squareup.pollexor.ThumborUrlBuilder;", 0x1, NULL, NULL },
    { "cropWithInt:withInt:withInt:withInt:", "crop", "Lcom.squareup.pollexor.ThumborUrlBuilder;", 0x1, NULL, NULL },
    { "alignWithPXRThumborEnums_HorizontalAlignEnum:", "align", "Lcom.squareup.pollexor.ThumborUrlBuilder;", 0x1, NULL, NULL },
    { "alignWithPXRThumborEnums_VerticalAlignEnum:", "align", "Lcom.squareup.pollexor.ThumborUrlBuilder;", 0x1, NULL, NULL },
    { "alignWithPXRThumborEnums_VerticalAlignEnum:withPXRThumborEnums_HorizontalAlignEnum:", "align", "Lcom.squareup.pollexor.ThumborUrlBuilder;", 0x1, NULL, NULL },
    { "smart", NULL, "Lcom.squareup.pollexor.ThumborUrlBuilder;", 0x1, NULL, NULL },
    { "trim", NULL, "Lcom.squareup.pollexor.ThumborUrlBuilder;", 0x1, NULL, NULL },
    { "trimWithPXRThumborEnums_TrimPixelColorEnum:", "trim", "Lcom.squareup.pollexor.ThumborUrlBuilder;", 0x1, NULL, NULL },
    { "trimWithPXRThumborEnums_TrimPixelColorEnum:withInt:", "trim", "Lcom.squareup.pollexor.ThumborUrlBuilder;", 0x1, NULL, NULL },
    { "filterWithNSStringArray:", "filter", "Lcom.squareup.pollexor.ThumborUrlBuilder;", 0x81, NULL, NULL },
    { "toUrl", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toUrlUnsafe", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toUrlSafe", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toMeta", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toMetaUnsafe", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toMetaSafe", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "assembleConfigWithBoolean:", "assembleConfig", "Ljava.lang.StringBuilder;", 0x0, NULL, NULL },
    { "brightnessWithInt:", "brightness", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "contrastWithInt:", "contrast", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "noiseWithInt:", "noise", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "qualityWithInt:", "quality", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "rgbWithInt:withInt:withInt:", "rgb", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "roundCornerWithInt:", "roundCorner", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "roundCornerWithInt:withInt:", "roundCorner", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "roundCornerWithInt:withInt:withInt:", "roundCorner", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "watermarkWithNSString:", "watermark", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "watermarkWithPXRThumborUrlBuilder:", "watermark", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "watermarkWithNSString:withInt:withInt:", "watermark", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "watermarkWithPXRThumborUrlBuilder:withInt:withInt:", "watermark", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "watermarkWithNSString:withInt:withInt:withInt:", "watermark", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "watermarkWithPXRThumborUrlBuilder:withInt:withInt:withInt:", "watermark", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "sharpenWithFloat:withFloat:withBoolean:", "sharpen", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "fillWithInt:", "fill", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "formatWithPXRThumborEnums_ImageFormatEnum:", "format", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "frameWithNSString:", "frame", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "stripicc", NULL, "Ljava.lang.String;", 0x9, NULL, NULL },
    { "grayscale", NULL, "Ljava.lang.String;", 0x9, NULL, NULL },
    { "equalize", NULL, "Ljava.lang.String;", 0x9, NULL, NULL },
    { "blurWithInt:", "blur", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "blurWithInt:withInt:", "blur", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "noUpscale", NULL, "Ljava.lang.String;", 0x9, NULL, NULL },
    { "rotateWithInt:", "rotate", "Ljava.lang.String;", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX_UNSAFE_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_PREFIX_UNSAFE_, NULL,  },
    { "PREFIX_META_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_PREFIX_META_, NULL,  },
    { "PART_SMART_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_PART_SMART_, NULL,  },
    { "PART_TRIM_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_PART_TRIM_, NULL,  },
    { "PART_FIT_IN_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_PART_FIT_IN_, NULL,  },
    { "PART_FILTERS_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_PART_FILTERS_, NULL,  },
    { "FILTER_BRIGHTNESS_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_BRIGHTNESS_, NULL,  },
    { "FILTER_CONTRAST_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_CONTRAST_, NULL,  },
    { "FILTER_NOISE_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_NOISE_, NULL,  },
    { "FILTER_QUALITY_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_QUALITY_, NULL,  },
    { "FILTER_RGB_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_RGB_, NULL,  },
    { "FILTER_ROUND_CORNER_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_ROUND_CORNER_, NULL,  },
    { "FILTER_WATERMARK_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_WATERMARK_, NULL,  },
    { "FILTER_SHARPEN_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_SHARPEN_, NULL,  },
    { "FILTER_FILL_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_FILL_, NULL,  },
    { "FILTER_FORMAT_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_FORMAT_, NULL,  },
    { "FILTER_FRAME_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_FRAME_, NULL,  },
    { "FILTER_STRIP_ICC_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_STRIP_ICC_, NULL,  },
    { "FILTER_GRAYSCALE_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_GRAYSCALE_, NULL,  },
    { "FILTER_EQUALIZE_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_EQUALIZE_, NULL,  },
    { "FILTER_BLUR_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_BLUR_, NULL,  },
    { "FILTER_NO_UPSCALE_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_NO_UPSCALE_, NULL,  },
    { "FILTER_ROTATE_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_ROTATE_, NULL,  },
    { "ORIGINAL_SIZE", "ORIGINAL_SIZE", 0x19, "I", NULL, NULL, .constantValue.asInt = PXRThumborUrlBuilder_ORIGINAL_SIZE },
    { "image_", NULL, 0x10, "Ljava.lang.String;", NULL, NULL,  },
    { "host_", NULL, 0x10, "Ljava.lang.String;", NULL, NULL,  },
    { "key_", NULL, 0x10, "Ljava.lang.String;", NULL, NULL,  },
    { "hasCrop_", NULL, 0x0, "Z", NULL, NULL,  },
    { "hasResize_", NULL, 0x0, "Z", NULL, NULL,  },
    { "isSmart_", NULL, 0x0, "Z", NULL, NULL,  },
    { "isTrim_", NULL, 0x0, "Z", NULL, NULL,  },
    { "flipHorizontally_", NULL, 0x0, "Z", NULL, NULL,  },
    { "flipVertically_", NULL, 0x0, "Z", NULL, NULL,  },
    { "fitIn_", NULL, 0x0, "Z", NULL, NULL,  },
    { "resizeWidth_", NULL, 0x0, "I", NULL, NULL,  },
    { "resizeHeight_", NULL, 0x0, "I", NULL, NULL,  },
    { "cropTop_", NULL, 0x0, "I", NULL, NULL,  },
    { "cropLeft_", NULL, 0x0, "I", NULL, NULL,  },
    { "cropBottom_", NULL, 0x0, "I", NULL, NULL,  },
    { "cropRight_", NULL, 0x0, "I", NULL, NULL,  },
    { "trimColorTolerance_", NULL, 0x0, "I", NULL, NULL,  },
    { "cropHorizontalAlign_", NULL, 0x0, "Lcom.squareup.pollexor.ThumborEnums$HorizontalAlign;", NULL, NULL,  },
    { "cropVerticalAlign_", NULL, 0x0, "Lcom.squareup.pollexor.ThumborEnums$VerticalAlign;", NULL, NULL,  },
    { "trimPixelColor_", NULL, 0x0, "Lcom.squareup.pollexor.ThumborEnums$TrimPixelColor;", NULL, NULL,  },
    { "filters_", NULL, 0x0, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/lang/String;>;",  },
  };
  static const J2ObjcClassInfo _PXRThumborUrlBuilder = { 2, "ThumborUrlBuilder", "com.squareup.pollexor", NULL, 0x11, 47, methods, 45, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_PXRThumborUrlBuilder;
}

@end

void PXRThumborUrlBuilder_initWithNSString_withNSString_withNSString_(PXRThumborUrlBuilder *self, NSString *host, NSString *key, NSString *image) {
  NSObject_init(self);
  PXRThumborUrlBuilder_set_host_(self, host);
  PXRThumborUrlBuilder_set_key_(self, key);
  PXRThumborUrlBuilder_set_image_(self, image);
}

PXRThumborUrlBuilder *new_PXRThumborUrlBuilder_initWithNSString_withNSString_withNSString_(NSString *host, NSString *key, NSString *image) {
  PXRThumborUrlBuilder *self = [PXRThumborUrlBuilder alloc];
  PXRThumborUrlBuilder_initWithNSString_withNSString_withNSString_(self, host, key, image);
  return self;
}

NSString *PXRThumborUrlBuilder_brightnessWithInt_(jint amount) {
  PXRThumborUrlBuilder_initialize();
  if (amount < -100 || amount > 100) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Amount must be between -100 and 100, inclusive.") autorelease];
  }
  return JreStrcat("$CIC", PXRThumborUrlBuilder_FILTER_BRIGHTNESS_, '(', amount, ')');
}

NSString *PXRThumborUrlBuilder_contrastWithInt_(jint amount) {
  PXRThumborUrlBuilder_initialize();
  if (amount < -100 || amount > 100) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Amount must be between -100 and 100, inclusive.") autorelease];
  }
  return JreStrcat("$CIC", PXRThumborUrlBuilder_FILTER_CONTRAST_, '(', amount, ')');
}

NSString *PXRThumborUrlBuilder_noiseWithInt_(jint amount) {
  PXRThumborUrlBuilder_initialize();
  if (amount < 0 || amount > 100) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Amount must be between 0 and 100, inclusive") autorelease];
  }
  return JreStrcat("$CIC", PXRThumborUrlBuilder_FILTER_NOISE_, '(', amount, ')');
}

NSString *PXRThumborUrlBuilder_qualityWithInt_(jint amount) {
  PXRThumborUrlBuilder_initialize();
  if (amount < 0 || amount > 100) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Amount must be between 0 and 100, inclusive.") autorelease];
  }
  return JreStrcat("$CIC", PXRThumborUrlBuilder_FILTER_QUALITY_, '(', amount, ')');
}

NSString *PXRThumborUrlBuilder_rgbWithInt_withInt_withInt_(jint r, jint g, jint b) {
  PXRThumborUrlBuilder_initialize();
  if (r < -100 || r > 100) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Red value must be between -100 and 100, inclusive.") autorelease];
  }
  if (g < -100 || g > 100) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Green value must be between -100 and 100, inclusive.") autorelease];
  }
  if (b < -100 || b > 100) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Blue value must be between -100 and 100, inclusive.") autorelease];
  }
  return JreStrcat("$CICICIC", PXRThumborUrlBuilder_FILTER_RGB_, '(', r, ',', g, ',', b, ')');
}

NSString *PXRThumborUrlBuilder_roundCornerWithInt_(jint radius) {
  PXRThumborUrlBuilder_initialize();
  return PXRThumborUrlBuilder_roundCornerWithInt_withInt_(radius, (jint) 0xFFFFFF);
}

NSString *PXRThumborUrlBuilder_roundCornerWithInt_withInt_(jint radius, jint color) {
  PXRThumborUrlBuilder_initialize();
  return PXRThumborUrlBuilder_roundCornerWithInt_withInt_withInt_(radius, 0, color);
}

NSString *PXRThumborUrlBuilder_roundCornerWithInt_withInt_withInt_(jint radiusInner, jint radiusOuter, jint color) {
  PXRThumborUrlBuilder_initialize();
  if (radiusInner < 1) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Radius must be greater than zero.") autorelease];
  }
  if (radiusOuter < 0) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Outer radius must be greater than or equal to zero.") autorelease];
  }
  JavaLangStringBuilder *builder = [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) [new_JavaLangStringBuilder_initWithNSString_(PXRThumborUrlBuilder_FILTER_ROUND_CORNER_) autorelease]) appendWithNSString:@"("])) appendWithInt:radiusInner];
  if (radiusOuter > 0) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(builder)) appendWithNSString:@"|"])) appendWithInt:radiusOuter];
  }
  jint r = URShift32((color & (jint) 0xFF0000), 16);
  jint g = URShift32((color & (jint) 0xFF00), 8);
  jint b = color & (jint) 0xFF;
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(builder)) appendWithNSString:@","])) appendWithInt:r])) appendWithNSString:@","])) appendWithInt:g])) appendWithNSString:@","])) appendWithInt:b])) appendWithNSString:@")"])) description];
}

NSString *PXRThumborUrlBuilder_watermarkWithNSString_(NSString *imageUrl) {
  PXRThumborUrlBuilder_initialize();
  return PXRThumborUrlBuilder_watermarkWithNSString_withInt_withInt_(imageUrl, 0, 0);
}

NSString *PXRThumborUrlBuilder_watermarkWithPXRThumborUrlBuilder_(PXRThumborUrlBuilder *image) {
  PXRThumborUrlBuilder_initialize();
  return PXRThumborUrlBuilder_watermarkWithPXRThumborUrlBuilder_withInt_withInt_(image, 0, 0);
}

NSString *PXRThumborUrlBuilder_watermarkWithNSString_withInt_withInt_(NSString *imageUrl, jint x, jint y) {
  PXRThumborUrlBuilder_initialize();
  return PXRThumborUrlBuilder_watermarkWithNSString_withInt_withInt_withInt_(imageUrl, x, y, 0);
}

NSString *PXRThumborUrlBuilder_watermarkWithPXRThumborUrlBuilder_withInt_withInt_(PXRThumborUrlBuilder *image, jint x, jint y) {
  PXRThumborUrlBuilder_initialize();
  if (image == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Image must not be null.") autorelease];
  }
  return PXRThumborUrlBuilder_watermarkWithNSString_withInt_withInt_withInt_([((PXRThumborUrlBuilder *) nil_chk(image)) description], x, y, 0);
}

NSString *PXRThumborUrlBuilder_watermarkWithNSString_withInt_withInt_withInt_(NSString *imageUrl, jint x, jint y, jint transparency) {
  PXRThumborUrlBuilder_initialize();
  if (imageUrl == nil || ((jint) [imageUrl length]) == 0) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Image URL must not be blank.") autorelease];
  }
  if (transparency < 0 || transparency > 100) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Transparency must be between 0 and 100, inclusive.") autorelease];
  }
  return JreStrcat("$C$CICICIC", PXRThumborUrlBuilder_FILTER_WATERMARK_, '(', imageUrl, ',', x, ',', y, ',', transparency, ')');
}

NSString *PXRThumborUrlBuilder_watermarkWithPXRThumborUrlBuilder_withInt_withInt_withInt_(PXRThumborUrlBuilder *image, jint x, jint y, jint transparency) {
  PXRThumborUrlBuilder_initialize();
  if (image == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Image must not be null.") autorelease];
  }
  return PXRThumborUrlBuilder_watermarkWithNSString_withInt_withInt_withInt_([((PXRThumborUrlBuilder *) nil_chk(image)) description], x, y, transparency);
}

NSString *PXRThumborUrlBuilder_sharpenWithFloat_withFloat_withBoolean_(jfloat amount, jfloat radius, jboolean luminanceOnly) {
  PXRThumborUrlBuilder_initialize();
  return JreStrcat("$CFCFCZC", PXRThumborUrlBuilder_FILTER_SHARPEN_, '(', amount, ',', radius, ',', luminanceOnly, ')');
}

NSString *PXRThumborUrlBuilder_fillWithInt_(jint color) {
  PXRThumborUrlBuilder_initialize();
  NSString *colorCode = JavaLangInteger_toHexStringWithInt_(color & (jint) 0xFFFFFF);
  return JreStrcat("$C$C", PXRThumborUrlBuilder_FILTER_FILL_, '(', colorCode, ')');
}

NSString *PXRThumborUrlBuilder_formatWithPXRThumborEnums_ImageFormatEnum_(PXRThumborEnums_ImageFormatEnum *format) {
  PXRThumborUrlBuilder_initialize();
  if (format == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"You must specify an image format.") autorelease];
  }
  return JreStrcat("$C$C", PXRThumborUrlBuilder_FILTER_FORMAT_, '(', ((PXRThumborEnums_ImageFormatEnum *) nil_chk(format))->value_, ')');
}

NSString *PXRThumborUrlBuilder_frameWithNSString_(NSString *imageUrl) {
  PXRThumborUrlBuilder_initialize();
  if (imageUrl == nil || ((jint) [imageUrl length]) == 0) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Image URL must not be blank.") autorelease];
  }
  return JreStrcat("$C$C", PXRThumborUrlBuilder_FILTER_FRAME_, '(', imageUrl, ')');
}

NSString *PXRThumborUrlBuilder_stripicc() {
  PXRThumborUrlBuilder_initialize();
  return JreStrcat("$$", PXRThumborUrlBuilder_FILTER_STRIP_ICC_, @"()");
}

NSString *PXRThumborUrlBuilder_grayscale() {
  PXRThumborUrlBuilder_initialize();
  return JreStrcat("$$", PXRThumborUrlBuilder_FILTER_GRAYSCALE_, @"()");
}

NSString *PXRThumborUrlBuilder_equalize() {
  PXRThumborUrlBuilder_initialize();
  return JreStrcat("$$", PXRThumborUrlBuilder_FILTER_EQUALIZE_, @"()");
}

NSString *PXRThumborUrlBuilder_blurWithInt_(jint radius) {
  PXRThumborUrlBuilder_initialize();
  return PXRThumborUrlBuilder_blurWithInt_withInt_(radius, 0);
}

NSString *PXRThumborUrlBuilder_blurWithInt_withInt_(jint radius, jint sigma) {
  PXRThumborUrlBuilder_initialize();
  if (radius < 1) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Radius must be greater than zero.") autorelease];
  }
  if (radius > 150) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Radius must be lower or equal than 150.") autorelease];
  }
  if (sigma < 0) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Sigma must be greater than zero.") autorelease];
  }
  return JreStrcat("$CICIC", PXRThumborUrlBuilder_FILTER_BLUR_, '(', radius, ',', sigma, ')');
}

NSString *PXRThumborUrlBuilder_noUpscale() {
  PXRThumborUrlBuilder_initialize();
  return JreStrcat("$$", PXRThumborUrlBuilder_FILTER_NO_UPSCALE_, @"()");
}

NSString *PXRThumborUrlBuilder_rotateWithInt_(jint angle) {
  PXRThumborUrlBuilder_initialize();
  if (angle % 90 != 0) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Angle must be multiple of 90\u00b0") autorelease];
  }
  return JreStrcat("$CIC", PXRThumborUrlBuilder_FILTER_ROTATE_, '(', angle, ')');
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PXRThumborUrlBuilder)
