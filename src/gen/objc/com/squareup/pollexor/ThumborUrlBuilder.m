//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/Laundryman/Libraries/pollexor/src/main/java/com/squareup/pollexor/ThumborUrlBuilder.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/squareup/pollexor/ThumborUrlBuilder.h"
#include "com/squareup/pollexor/Utilities.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

inline NSString *PXRThumborUrlBuilder_get_PREFIX_UNSAFE(void);
static NSString *PXRThumborUrlBuilder_PREFIX_UNSAFE = @"unsafe/";
J2OBJC_STATIC_FIELD_OBJ_FINAL(PXRThumborUrlBuilder, PREFIX_UNSAFE, NSString *)

inline NSString *PXRThumborUrlBuilder_get_PREFIX_META(void);
static NSString *PXRThumborUrlBuilder_PREFIX_META = @"meta/";
J2OBJC_STATIC_FIELD_OBJ_FINAL(PXRThumborUrlBuilder, PREFIX_META, NSString *)

inline NSString *PXRThumborUrlBuilder_get_PART_SMART(void);
static NSString *PXRThumborUrlBuilder_PART_SMART = @"smart";
J2OBJC_STATIC_FIELD_OBJ_FINAL(PXRThumborUrlBuilder, PART_SMART, NSString *)

inline NSString *PXRThumborUrlBuilder_get_PART_TRIM(void);
static NSString *PXRThumborUrlBuilder_PART_TRIM = @"trim";
J2OBJC_STATIC_FIELD_OBJ_FINAL(PXRThumborUrlBuilder, PART_TRIM, NSString *)

inline NSString *PXRThumborUrlBuilder_get_PART_FIT_IN(void);
static NSString *PXRThumborUrlBuilder_PART_FIT_IN = @"fit-in";
J2OBJC_STATIC_FIELD_OBJ_FINAL(PXRThumborUrlBuilder, PART_FIT_IN, NSString *)

inline NSString *PXRThumborUrlBuilder_get_PART_FILTERS(void);
static NSString *PXRThumborUrlBuilder_PART_FILTERS = @"filters";
J2OBJC_STATIC_FIELD_OBJ_FINAL(PXRThumborUrlBuilder, PART_FILTERS, NSString *)

inline NSString *PXRThumborUrlBuilder_get_FILTER_BRIGHTNESS(void);
static NSString *PXRThumborUrlBuilder_FILTER_BRIGHTNESS = @"brightness";
J2OBJC_STATIC_FIELD_OBJ_FINAL(PXRThumborUrlBuilder, FILTER_BRIGHTNESS, NSString *)

inline NSString *PXRThumborUrlBuilder_get_FILTER_CONTRAST(void);
static NSString *PXRThumborUrlBuilder_FILTER_CONTRAST = @"contrast";
J2OBJC_STATIC_FIELD_OBJ_FINAL(PXRThumborUrlBuilder, FILTER_CONTRAST, NSString *)

inline NSString *PXRThumborUrlBuilder_get_FILTER_NOISE(void);
static NSString *PXRThumborUrlBuilder_FILTER_NOISE = @"noise";
J2OBJC_STATIC_FIELD_OBJ_FINAL(PXRThumborUrlBuilder, FILTER_NOISE, NSString *)

inline NSString *PXRThumborUrlBuilder_get_FILTER_QUALITY(void);
static NSString *PXRThumborUrlBuilder_FILTER_QUALITY = @"quality";
J2OBJC_STATIC_FIELD_OBJ_FINAL(PXRThumborUrlBuilder, FILTER_QUALITY, NSString *)

inline NSString *PXRThumborUrlBuilder_get_FILTER_RGB(void);
static NSString *PXRThumborUrlBuilder_FILTER_RGB = @"rgb";
J2OBJC_STATIC_FIELD_OBJ_FINAL(PXRThumborUrlBuilder, FILTER_RGB, NSString *)

inline NSString *PXRThumborUrlBuilder_get_FILTER_ROUND_CORNER(void);
static NSString *PXRThumborUrlBuilder_FILTER_ROUND_CORNER = @"round_corner";
J2OBJC_STATIC_FIELD_OBJ_FINAL(PXRThumborUrlBuilder, FILTER_ROUND_CORNER, NSString *)

inline NSString *PXRThumborUrlBuilder_get_FILTER_WATERMARK(void);
static NSString *PXRThumborUrlBuilder_FILTER_WATERMARK = @"watermark";
J2OBJC_STATIC_FIELD_OBJ_FINAL(PXRThumborUrlBuilder, FILTER_WATERMARK, NSString *)

inline NSString *PXRThumborUrlBuilder_get_FILTER_SHARPEN(void);
static NSString *PXRThumborUrlBuilder_FILTER_SHARPEN = @"sharpen";
J2OBJC_STATIC_FIELD_OBJ_FINAL(PXRThumborUrlBuilder, FILTER_SHARPEN, NSString *)

inline NSString *PXRThumborUrlBuilder_get_FILTER_FILL(void);
static NSString *PXRThumborUrlBuilder_FILTER_FILL = @"fill";
J2OBJC_STATIC_FIELD_OBJ_FINAL(PXRThumborUrlBuilder, FILTER_FILL, NSString *)

inline NSString *PXRThumborUrlBuilder_get_FILTER_FORMAT(void);
static NSString *PXRThumborUrlBuilder_FILTER_FORMAT = @"format";
J2OBJC_STATIC_FIELD_OBJ_FINAL(PXRThumborUrlBuilder, FILTER_FORMAT, NSString *)

inline NSString *PXRThumborUrlBuilder_get_FILTER_FRAME(void);
static NSString *PXRThumborUrlBuilder_FILTER_FRAME = @"frame";
J2OBJC_STATIC_FIELD_OBJ_FINAL(PXRThumborUrlBuilder, FILTER_FRAME, NSString *)

inline NSString *PXRThumborUrlBuilder_get_FILTER_STRIP_ICC(void);
static NSString *PXRThumborUrlBuilder_FILTER_STRIP_ICC = @"strip_icc";
J2OBJC_STATIC_FIELD_OBJ_FINAL(PXRThumborUrlBuilder, FILTER_STRIP_ICC, NSString *)

inline NSString *PXRThumborUrlBuilder_get_FILTER_GRAYSCALE(void);
static NSString *PXRThumborUrlBuilder_FILTER_GRAYSCALE = @"grayscale";
J2OBJC_STATIC_FIELD_OBJ_FINAL(PXRThumborUrlBuilder, FILTER_GRAYSCALE, NSString *)

inline NSString *PXRThumborUrlBuilder_get_FILTER_EQUALIZE(void);
static NSString *PXRThumborUrlBuilder_FILTER_EQUALIZE = @"equalize";
J2OBJC_STATIC_FIELD_OBJ_FINAL(PXRThumborUrlBuilder, FILTER_EQUALIZE, NSString *)

inline NSString *PXRThumborUrlBuilder_get_FILTER_BLUR(void);
static NSString *PXRThumborUrlBuilder_FILTER_BLUR = @"blur";
J2OBJC_STATIC_FIELD_OBJ_FINAL(PXRThumborUrlBuilder, FILTER_BLUR, NSString *)

inline NSString *PXRThumborUrlBuilder_get_FILTER_NO_UPSCALE(void);
static NSString *PXRThumborUrlBuilder_FILTER_NO_UPSCALE = @"no_upscale";
J2OBJC_STATIC_FIELD_OBJ_FINAL(PXRThumborUrlBuilder, FILTER_NO_UPSCALE, NSString *)

inline NSString *PXRThumborUrlBuilder_get_FILTER_ROTATE(void);
static NSString *PXRThumborUrlBuilder_FILTER_ROTATE = @"rotate";
J2OBJC_STATIC_FIELD_OBJ_FINAL(PXRThumborUrlBuilder, FILTER_ROTATE, NSString *)

__attribute__((unused)) static void PXRThumborUrlBuilder_HorizontalAlign_initWithNSString_withNSString_withInt_(PXRThumborUrlBuilder_HorizontalAlign *self, NSString *value, NSString *__name, jint __ordinal);

__attribute__((unused)) static void PXRThumborUrlBuilder_VerticalAlign_initWithNSString_withNSString_withInt_(PXRThumborUrlBuilder_VerticalAlign *self, NSString *value, NSString *__name, jint __ordinal);

__attribute__((unused)) static void PXRThumborUrlBuilder_TrimPixelColor_initWithNSString_withNSString_withInt_(PXRThumborUrlBuilder_TrimPixelColor *self, NSString *value, NSString *__name, jint __ordinal);

__attribute__((unused)) static void PXRThumborUrlBuilder_ImageFormat_initWithNSString_withNSString_withInt_(PXRThumborUrlBuilder_ImageFormat *self, NSString *value, NSString *__name, jint __ordinal);

@implementation PXRThumborUrlBuilder

- (instancetype)initWithNSString:(NSString *)host
                    withNSString:(NSString *)key
                    withNSString:(NSString *)image {
  PXRThumborUrlBuilder_initWithNSString_withNSString_withNSString_(self, host, key, image);
  return self;
}

- (PXRThumborUrlBuilder *)resizeWithInt:(jint)width
                                withInt:(jint)height {
  if (width < 0 && width != PXRThumborUrlBuilder_ORIGINAL_SIZE) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Width must be a positive number.");
  }
  if (height < 0 && height != PXRThumborUrlBuilder_ORIGINAL_SIZE) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Height must be a positive number.");
  }
  if (width == 0 && height == 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Both width and height must not be zero.");
  }
  hasResize_ = true;
  resizeWidth_ = width;
  resizeHeight_ = height;
  return self;
}

- (PXRThumborUrlBuilder *)flipHorizontally {
  if (!hasResize_) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Image must be resized first in order to flip.");
  }
  flipHorizontally_ = true;
  return self;
}

- (PXRThumborUrlBuilder *)flipVertically {
  if (!hasResize_) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Image must be resized first in order to flip.");
  }
  flipVertically_ = true;
  return self;
}

- (PXRThumborUrlBuilder *)fitIn {
  if (!hasResize_) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Image must be resized first in order to apply 'fit-in'.");
  }
  fitIn_ = true;
  return self;
}

- (PXRThumborUrlBuilder *)cropWithInt:(jint)top
                              withInt:(jint)left
                              withInt:(jint)bottom
                              withInt:(jint)right {
  if (top < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Top must be greater or equal to zero.");
  }
  if (left < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Left must be greater or equal to zero.");
  }
  if (bottom < 1 || bottom <= top) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Bottom must be greater than zero and top.");
  }
  if (right < 1 || right <= left) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Right must be greater than zero and left.");
  }
  hasCrop_ = true;
  cropTop_ = top;
  cropLeft_ = left;
  cropBottom_ = bottom;
  cropRight_ = right;
  return self;
}

- (PXRThumborUrlBuilder *)alignWithPXRThumborUrlBuilder_HorizontalAlign:(PXRThumborUrlBuilder_HorizontalAlign *)align {
  if (!hasResize_) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Image must be resized first in order to align.");
  }
  JreStrongAssign(&cropHorizontalAlign_, align);
  return self;
}

- (PXRThumborUrlBuilder *)alignWithPXRThumborUrlBuilder_VerticalAlign:(PXRThumborUrlBuilder_VerticalAlign *)align {
  if (!hasResize_) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Image must be resized first in order to align.");
  }
  JreStrongAssign(&cropVerticalAlign_, align);
  return self;
}

- (PXRThumborUrlBuilder *)alignWithPXRThumborUrlBuilder_VerticalAlign:(PXRThumborUrlBuilder_VerticalAlign *)valign
                             withPXRThumborUrlBuilder_HorizontalAlign:(PXRThumborUrlBuilder_HorizontalAlign *)halign {
  return [((PXRThumborUrlBuilder *) nil_chk([self alignWithPXRThumborUrlBuilder_VerticalAlign:valign])) alignWithPXRThumborUrlBuilder_HorizontalAlign:halign];
}

- (PXRThumborUrlBuilder *)smart {
  if (!hasResize_) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Image must be resized first in order to smart align.");
  }
  isSmart_ = true;
  return self;
}

- (PXRThumborUrlBuilder *)trim {
  return [self trimWithPXRThumborUrlBuilder_TrimPixelColor:nil];
}

- (PXRThumborUrlBuilder *)trimWithPXRThumborUrlBuilder_TrimPixelColor:(PXRThumborUrlBuilder_TrimPixelColor *)value {
  return [self trimWithPXRThumborUrlBuilder_TrimPixelColor:value withInt:0];
}

- (PXRThumborUrlBuilder *)trimWithPXRThumborUrlBuilder_TrimPixelColor:(PXRThumborUrlBuilder_TrimPixelColor *)value
                                                              withInt:(jint)colorTolerance {
  if (colorTolerance < 0 || colorTolerance > 442) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Color tolerance must be between 0 and 442.");
  }
  if (colorTolerance > 0 && value == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Trim pixel color value must not be null.");
  }
  isTrim_ = true;
  JreStrongAssign(&trimPixelColor_, value);
  trimColorTolerance_ = colorTolerance;
  return self;
}

- (PXRThumborUrlBuilder *)filterWithNSStringArray:(IOSObjectArray *)filters {
  if (((IOSObjectArray *) nil_chk(filters))->size_ == 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"You must provide at least one filter.");
  }
  if (self->filters_ == nil) {
    JreStrongAssignAndConsume(&self->filters_, new_JavaUtilArrayList_initWithInt_(filters->size_));
  }
  {
    IOSObjectArray *a__ = filters;
    NSString * const *b__ = a__->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *filter = *b__++;
      if (filter == nil || [filter java_length] == 0) {
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Filter must not be blank.");
      }
      [((id<JavaUtilList>) nil_chk(self->filters_)) addWithId:filter];
    }
  }
  return self;
}

- (NSString *)toUrl {
  return (key_ == nil) ? [self toUrlUnsafe] : [self toUrlSafe];
}

- (NSString *)toUrlUnsafe {
  return JreStrcat("$$@", host_, PXRThumborUrlBuilder_PREFIX_UNSAFE, [self assembleConfigWithBoolean:false]);
}

- (NSString *)toUrlSafe {
  if (key_ == nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Cannot build safe URL without a key.");
  }
  JavaLangStringBuilder *config = [self assembleConfigWithBoolean:false];
  IOSByteArray *encrypted = PXRUtilities_hmacSha1WithJavaLangStringBuilder_withNSString_(config, key_);
  NSString *encoded = PXRUtilities_base64EncodeWithByteArray_(encrypted);
  id<JavaLangCharSequence> suffix = config;
  return JreStrcat("$$C@", host_, encoded, '/', suffix);
}

- (NSString *)toMeta {
  return (key_ == nil) ? [self toMetaUnsafe] : [self toMetaSafe];
}

- (NSString *)toMetaUnsafe {
  return JreStrcat("$@", host_, [self assembleConfigWithBoolean:true]);
}

- (NSString *)toMetaSafe {
  JavaLangStringBuilder *config = [self assembleConfigWithBoolean:true];
  IOSByteArray *encrypted = PXRUtilities_hmacSha1WithJavaLangStringBuilder_withNSString_(config, key_);
  NSString *encoded = PXRUtilities_base64EncodeWithByteArray_(encrypted);
  return JreStrcat("$$C@", host_, encoded, '/', config);
}

- (NSString *)description {
  return [self toUrl];
}

- (JavaLangStringBuilder *)assembleConfigWithBoolean:(jboolean)meta {
  JavaLangStringBuilder *builder = create_JavaLangStringBuilder_init();
  if (meta) {
    [builder appendWithNSString:PXRThumborUrlBuilder_PREFIX_META];
  }
  if (isTrim_) {
    [builder appendWithNSString:PXRThumborUrlBuilder_PART_TRIM];
    if (trimPixelColor_ != nil) {
      [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:@":"])) appendWithNSString:((PXRThumborUrlBuilder_TrimPixelColor *) nil_chk(trimPixelColor_))->value_];
      if (trimColorTolerance_ > 0) {
        [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:@":"])) appendWithInt:trimColorTolerance_];
      }
    }
    [builder appendWithNSString:@"/"];
  }
  if (hasCrop_) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([builder appendWithInt:cropLeft_])) appendWithNSString:@"x"])) appendWithInt:cropTop_])) appendWithNSString:@":"])) appendWithInt:cropRight_])) appendWithNSString:@"x"])) appendWithInt:cropBottom_];
    [builder appendWithNSString:@"/"];
  }
  if (hasResize_) {
    if (fitIn_) {
      [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:PXRThumborUrlBuilder_PART_FIT_IN])) appendWithNSString:@"/"];
    }
    if (flipHorizontally_) {
      [builder appendWithNSString:@"-"];
    }
    if (resizeWidth_ == PXRThumborUrlBuilder_ORIGINAL_SIZE) {
      [builder appendWithNSString:@"orig"];
    }
    else {
      [builder appendWithInt:resizeWidth_];
    }
    [builder appendWithNSString:@"x"];
    if (flipVertically_) {
      [builder appendWithNSString:@"-"];
    }
    if (resizeHeight_ == PXRThumborUrlBuilder_ORIGINAL_SIZE) {
      [builder appendWithNSString:@"orig"];
    }
    else {
      [builder appendWithInt:resizeHeight_];
    }
    if (isSmart_) {
      [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:@"/"])) appendWithNSString:PXRThumborUrlBuilder_PART_SMART];
    }
    else {
      if (cropHorizontalAlign_ != nil) {
        [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:@"/"])) appendWithNSString:((PXRThumborUrlBuilder_HorizontalAlign *) nil_chk(cropHorizontalAlign_))->value_];
      }
      if (cropVerticalAlign_ != nil) {
        [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:@"/"])) appendWithNSString:((PXRThumborUrlBuilder_VerticalAlign *) nil_chk(cropVerticalAlign_))->value_];
      }
    }
    [builder appendWithNSString:@"/"];
  }
  if (filters_ != nil) {
    [builder appendWithNSString:PXRThumborUrlBuilder_PART_FILTERS];
    for (NSString * __strong filter in nil_chk(filters_)) {
      [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:@":"])) appendWithNSString:filter];
    }
    [builder appendWithNSString:@"/"];
  }
  [builder appendWithNSString:image_];
  return builder;
}

+ (NSString *)brightnessWithInt:(jint)amount {
  return PXRThumborUrlBuilder_brightnessWithInt_(amount);
}

+ (NSString *)contrastWithInt:(jint)amount {
  return PXRThumborUrlBuilder_contrastWithInt_(amount);
}

+ (NSString *)noiseWithInt:(jint)amount {
  return PXRThumborUrlBuilder_noiseWithInt_(amount);
}

+ (NSString *)qualityWithInt:(jint)amount {
  return PXRThumborUrlBuilder_qualityWithInt_(amount);
}

+ (NSString *)rgbWithInt:(jint)r
                 withInt:(jint)g
                 withInt:(jint)b {
  return PXRThumborUrlBuilder_rgbWithInt_withInt_withInt_(r, g, b);
}

+ (NSString *)roundCornerWithInt:(jint)radius {
  return PXRThumborUrlBuilder_roundCornerWithInt_(radius);
}

+ (NSString *)roundCornerWithInt:(jint)radius
                         withInt:(jint)color {
  return PXRThumborUrlBuilder_roundCornerWithInt_withInt_(radius, color);
}

+ (NSString *)roundCornerWithInt:(jint)radiusInner
                         withInt:(jint)radiusOuter
                         withInt:(jint)color {
  return PXRThumborUrlBuilder_roundCornerWithInt_withInt_withInt_(radiusInner, radiusOuter, color);
}

+ (NSString *)watermarkWithNSString:(NSString *)imageUrl {
  return PXRThumborUrlBuilder_watermarkWithNSString_(imageUrl);
}

+ (NSString *)watermarkWithPXRThumborUrlBuilder:(PXRThumborUrlBuilder *)image {
  return PXRThumborUrlBuilder_watermarkWithPXRThumborUrlBuilder_(image);
}

+ (NSString *)watermarkWithNSString:(NSString *)imageUrl
                            withInt:(jint)x
                            withInt:(jint)y {
  return PXRThumborUrlBuilder_watermarkWithNSString_withInt_withInt_(imageUrl, x, y);
}

+ (NSString *)watermarkWithPXRThumborUrlBuilder:(PXRThumborUrlBuilder *)image
                                        withInt:(jint)x
                                        withInt:(jint)y {
  return PXRThumborUrlBuilder_watermarkWithPXRThumborUrlBuilder_withInt_withInt_(image, x, y);
}

+ (NSString *)watermarkWithNSString:(NSString *)imageUrl
                            withInt:(jint)x
                            withInt:(jint)y
                            withInt:(jint)transparency {
  return PXRThumborUrlBuilder_watermarkWithNSString_withInt_withInt_withInt_(imageUrl, x, y, transparency);
}

+ (NSString *)watermarkWithPXRThumborUrlBuilder:(PXRThumborUrlBuilder *)image
                                        withInt:(jint)x
                                        withInt:(jint)y
                                        withInt:(jint)transparency {
  return PXRThumborUrlBuilder_watermarkWithPXRThumborUrlBuilder_withInt_withInt_withInt_(image, x, y, transparency);
}

+ (NSString *)sharpenWithFloat:(jfloat)amount
                     withFloat:(jfloat)radius
                   withBoolean:(jboolean)luminanceOnly {
  return PXRThumborUrlBuilder_sharpenWithFloat_withFloat_withBoolean_(amount, radius, luminanceOnly);
}

+ (NSString *)fillWithInt:(jint)color {
  return PXRThumborUrlBuilder_fillWithInt_(color);
}

+ (NSString *)formatWithPXRThumborUrlBuilder_ImageFormat:(PXRThumborUrlBuilder_ImageFormat *)format {
  return PXRThumborUrlBuilder_formatWithPXRThumborUrlBuilder_ImageFormat_(format);
}

+ (NSString *)frameWithNSString:(NSString *)imageUrl {
  return PXRThumborUrlBuilder_frameWithNSString_(imageUrl);
}

+ (NSString *)stripicc {
  return PXRThumborUrlBuilder_stripicc();
}

+ (NSString *)grayscale {
  return PXRThumborUrlBuilder_grayscale();
}

+ (NSString *)equalize {
  return PXRThumborUrlBuilder_equalize();
}

+ (NSString *)blurWithInt:(jint)radius {
  return PXRThumborUrlBuilder_blurWithInt_(radius);
}

+ (NSString *)blurWithInt:(jint)radius
                  withInt:(jint)sigma {
  return PXRThumborUrlBuilder_blurWithInt_withInt_(radius, sigma);
}

+ (NSString *)noUpscale {
  return PXRThumborUrlBuilder_noUpscale();
}

+ (NSString *)rotateWithInt:(jint)angle {
  return PXRThumborUrlBuilder_rotateWithInt_(angle);
}

- (void)dealloc {
  RELEASE_(image_);
  RELEASE_(host_);
  RELEASE_(key_);
  RELEASE_(cropHorizontalAlign_);
  RELEASE_(cropVerticalAlign_);
  RELEASE_(trimPixelColor_);
  RELEASE_(filters_);
  [super dealloc];
}

@end

void PXRThumborUrlBuilder_initWithNSString_withNSString_withNSString_(PXRThumborUrlBuilder *self, NSString *host, NSString *key, NSString *image) {
  NSObject_init(self);
  JreStrongAssign(&self->host_, host);
  JreStrongAssign(&self->key_, key);
  JreStrongAssign(&self->image_, image);
}

PXRThumborUrlBuilder *new_PXRThumborUrlBuilder_initWithNSString_withNSString_withNSString_(NSString *host, NSString *key, NSString *image) {
  J2OBJC_NEW_IMPL(PXRThumborUrlBuilder, initWithNSString_withNSString_withNSString_, host, key, image)
}

PXRThumborUrlBuilder *create_PXRThumborUrlBuilder_initWithNSString_withNSString_withNSString_(NSString *host, NSString *key, NSString *image) {
  J2OBJC_CREATE_IMPL(PXRThumborUrlBuilder, initWithNSString_withNSString_withNSString_, host, key, image)
}

NSString *PXRThumborUrlBuilder_brightnessWithInt_(jint amount) {
  PXRThumborUrlBuilder_initialize();
  if (amount < -100 || amount > 100) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Amount must be between -100 and 100, inclusive.");
  }
  return JreStrcat("$CIC", PXRThumborUrlBuilder_FILTER_BRIGHTNESS, '(', amount, ')');
}

NSString *PXRThumborUrlBuilder_contrastWithInt_(jint amount) {
  PXRThumborUrlBuilder_initialize();
  if (amount < -100 || amount > 100) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Amount must be between -100 and 100, inclusive.");
  }
  return JreStrcat("$CIC", PXRThumborUrlBuilder_FILTER_CONTRAST, '(', amount, ')');
}

NSString *PXRThumborUrlBuilder_noiseWithInt_(jint amount) {
  PXRThumborUrlBuilder_initialize();
  if (amount < 0 || amount > 100) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Amount must be between 0 and 100, inclusive");
  }
  return JreStrcat("$CIC", PXRThumborUrlBuilder_FILTER_NOISE, '(', amount, ')');
}

NSString *PXRThumborUrlBuilder_qualityWithInt_(jint amount) {
  PXRThumborUrlBuilder_initialize();
  if (amount < 0 || amount > 100) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Amount must be between 0 and 100, inclusive.");
  }
  return JreStrcat("$CIC", PXRThumborUrlBuilder_FILTER_QUALITY, '(', amount, ')');
}

NSString *PXRThumborUrlBuilder_rgbWithInt_withInt_withInt_(jint r, jint g, jint b) {
  PXRThumborUrlBuilder_initialize();
  if (r < -100 || r > 100) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Red value must be between -100 and 100, inclusive.");
  }
  if (g < -100 || g > 100) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Green value must be between -100 and 100, inclusive.");
  }
  if (b < -100 || b > 100) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Blue value must be between -100 and 100, inclusive.");
  }
  return JreStrcat("$CICICIC", PXRThumborUrlBuilder_FILTER_RGB, '(', r, ',', g, ',', b, ')');
}

NSString *PXRThumborUrlBuilder_roundCornerWithInt_(jint radius) {
  PXRThumborUrlBuilder_initialize();
  return PXRThumborUrlBuilder_roundCornerWithInt_withInt_(radius, (jint) 0xFFFFFF);
}

NSString *PXRThumborUrlBuilder_roundCornerWithInt_withInt_(jint radius, jint color) {
  PXRThumborUrlBuilder_initialize();
  return PXRThumborUrlBuilder_roundCornerWithInt_withInt_withInt_(radius, 0, color);
}

NSString *PXRThumborUrlBuilder_roundCornerWithInt_withInt_withInt_(jint radiusInner, jint radiusOuter, jint color) {
  PXRThumborUrlBuilder_initialize();
  if (radiusInner < 1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Radius must be greater than zero.");
  }
  if (radiusOuter < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Outer radius must be greater than or equal to zero.");
  }
  JavaLangStringBuilder *builder = [((JavaLangStringBuilder *) nil_chk([create_JavaLangStringBuilder_initWithNSString_(PXRThumborUrlBuilder_FILTER_ROUND_CORNER) appendWithNSString:@"("])) appendWithInt:radiusInner];
  if (radiusOuter > 0) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(builder)) appendWithNSString:@"|"])) appendWithInt:radiusOuter];
  }
  jint r = JreURShift32((color & (jint) 0xFF0000), 16);
  jint g = JreURShift32((color & (jint) 0xFF00), 8);
  jint b = color & (jint) 0xFF;
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(builder)) appendWithNSString:@","])) appendWithInt:r])) appendWithNSString:@","])) appendWithInt:g])) appendWithNSString:@","])) appendWithInt:b])) appendWithNSString:@")"])) description];
}

NSString *PXRThumborUrlBuilder_watermarkWithNSString_(NSString *imageUrl) {
  PXRThumborUrlBuilder_initialize();
  return PXRThumborUrlBuilder_watermarkWithNSString_withInt_withInt_(imageUrl, 0, 0);
}

NSString *PXRThumborUrlBuilder_watermarkWithPXRThumborUrlBuilder_(PXRThumborUrlBuilder *image) {
  PXRThumborUrlBuilder_initialize();
  return PXRThumborUrlBuilder_watermarkWithPXRThumborUrlBuilder_withInt_withInt_(image, 0, 0);
}

NSString *PXRThumborUrlBuilder_watermarkWithNSString_withInt_withInt_(NSString *imageUrl, jint x, jint y) {
  PXRThumborUrlBuilder_initialize();
  return PXRThumborUrlBuilder_watermarkWithNSString_withInt_withInt_withInt_(imageUrl, x, y, 0);
}

NSString *PXRThumborUrlBuilder_watermarkWithPXRThumborUrlBuilder_withInt_withInt_(PXRThumborUrlBuilder *image, jint x, jint y) {
  PXRThumborUrlBuilder_initialize();
  if (image == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Image must not be null.");
  }
  return PXRThumborUrlBuilder_watermarkWithNSString_withInt_withInt_withInt_([image description], x, y, 0);
}

NSString *PXRThumborUrlBuilder_watermarkWithNSString_withInt_withInt_withInt_(NSString *imageUrl, jint x, jint y, jint transparency) {
  PXRThumborUrlBuilder_initialize();
  if (imageUrl == nil || [imageUrl java_length] == 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Image URL must not be blank.");
  }
  if (transparency < 0 || transparency > 100) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Transparency must be between 0 and 100, inclusive.");
  }
  return JreStrcat("$C$CICICIC", PXRThumborUrlBuilder_FILTER_WATERMARK, '(', imageUrl, ',', x, ',', y, ',', transparency, ')');
}

NSString *PXRThumborUrlBuilder_watermarkWithPXRThumborUrlBuilder_withInt_withInt_withInt_(PXRThumborUrlBuilder *image, jint x, jint y, jint transparency) {
  PXRThumborUrlBuilder_initialize();
  if (image == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Image must not be null.");
  }
  return PXRThumborUrlBuilder_watermarkWithNSString_withInt_withInt_withInt_([image description], x, y, transparency);
}

NSString *PXRThumborUrlBuilder_sharpenWithFloat_withFloat_withBoolean_(jfloat amount, jfloat radius, jboolean luminanceOnly) {
  PXRThumborUrlBuilder_initialize();
  return JreStrcat("$CFCFCZC", PXRThumborUrlBuilder_FILTER_SHARPEN, '(', amount, ',', radius, ',', luminanceOnly, ')');
}

NSString *PXRThumborUrlBuilder_fillWithInt_(jint color) {
  PXRThumborUrlBuilder_initialize();
  NSString *colorCode = JavaLangInteger_toHexStringWithInt_(color & (jint) 0xFFFFFF);
  return JreStrcat("$C$C", PXRThumborUrlBuilder_FILTER_FILL, '(', colorCode, ')');
}

NSString *PXRThumborUrlBuilder_formatWithPXRThumborUrlBuilder_ImageFormat_(PXRThumborUrlBuilder_ImageFormat *format) {
  PXRThumborUrlBuilder_initialize();
  if (format == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"You must specify an image format.");
  }
  return JreStrcat("$C$C", PXRThumborUrlBuilder_FILTER_FORMAT, '(', format->value_, ')');
}

NSString *PXRThumborUrlBuilder_frameWithNSString_(NSString *imageUrl) {
  PXRThumborUrlBuilder_initialize();
  if (imageUrl == nil || [imageUrl java_length] == 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Image URL must not be blank.");
  }
  return JreStrcat("$C$C", PXRThumborUrlBuilder_FILTER_FRAME, '(', imageUrl, ')');
}

NSString *PXRThumborUrlBuilder_stripicc() {
  PXRThumborUrlBuilder_initialize();
  return JreStrcat("$$", PXRThumborUrlBuilder_FILTER_STRIP_ICC, @"()");
}

NSString *PXRThumborUrlBuilder_grayscale() {
  PXRThumborUrlBuilder_initialize();
  return JreStrcat("$$", PXRThumborUrlBuilder_FILTER_GRAYSCALE, @"()");
}

NSString *PXRThumborUrlBuilder_equalize() {
  PXRThumborUrlBuilder_initialize();
  return JreStrcat("$$", PXRThumborUrlBuilder_FILTER_EQUALIZE, @"()");
}

NSString *PXRThumborUrlBuilder_blurWithInt_(jint radius) {
  PXRThumborUrlBuilder_initialize();
  return PXRThumborUrlBuilder_blurWithInt_withInt_(radius, 0);
}

NSString *PXRThumborUrlBuilder_blurWithInt_withInt_(jint radius, jint sigma) {
  PXRThumborUrlBuilder_initialize();
  if (radius < 1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Radius must be greater than zero.");
  }
  if (radius > 150) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Radius must be lower or equal than 150.");
  }
  if (sigma < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Sigma must be greater than zero.");
  }
  return JreStrcat("$CICIC", PXRThumborUrlBuilder_FILTER_BLUR, '(', radius, ',', sigma, ')');
}

NSString *PXRThumborUrlBuilder_noUpscale() {
  PXRThumborUrlBuilder_initialize();
  return JreStrcat("$$", PXRThumborUrlBuilder_FILTER_NO_UPSCALE, @"()");
}

NSString *PXRThumborUrlBuilder_rotateWithInt_(jint angle) {
  PXRThumborUrlBuilder_initialize();
  if (JreIntMod(angle, 90) != 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Angle must be multiple of 90\u00b0");
  }
  return JreStrcat("$CIC", PXRThumborUrlBuilder_FILTER_ROTATE, '(', angle, ')');
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PXRThumborUrlBuilder)

J2OBJC_INITIALIZED_DEFN(PXRThumborUrlBuilder_HorizontalAlign)

PXRThumborUrlBuilder_HorizontalAlign *PXRThumborUrlBuilder_HorizontalAlign_values_[3];

@implementation PXRThumborUrlBuilder_HorizontalAlign

+ (IOSObjectArray *)values {
  return PXRThumborUrlBuilder_HorizontalAlign_values();
}

+ (PXRThumborUrlBuilder_HorizontalAlign *)valueOfWithNSString:(NSString *)name {
  return PXRThumborUrlBuilder_HorizontalAlign_valueOfWithNSString_(name);
}

- (PXRThumborUrlBuilder_HorizontalAlign_Enum)toNSEnum {
  return (PXRThumborUrlBuilder_HorizontalAlign_Enum)[self ordinal];
}

+ (void)initialize {
  if (self == [PXRThumborUrlBuilder_HorizontalAlign class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 3 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    ((void) (JreEnum(PXRThumborUrlBuilder_HorizontalAlign, LEFT) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    PXRThumborUrlBuilder_HorizontalAlign_initWithNSString_withNSString_withInt_(e, @"left", @"LEFT", 0);
    ((void) (JreEnum(PXRThumborUrlBuilder_HorizontalAlign, CENTER) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    PXRThumborUrlBuilder_HorizontalAlign_initWithNSString_withNSString_withInt_(e, @"center", @"CENTER", 1);
    ((void) (JreEnum(PXRThumborUrlBuilder_HorizontalAlign, RIGHT) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    PXRThumborUrlBuilder_HorizontalAlign_initWithNSString_withNSString_withInt_(e, @"right", @"RIGHT", 2);
    J2OBJC_SET_INITIALIZED(PXRThumborUrlBuilder_HorizontalAlign)
  }
}

@end

void PXRThumborUrlBuilder_HorizontalAlign_initWithNSString_withNSString_withInt_(PXRThumborUrlBuilder_HorizontalAlign *self, NSString *value, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  JreStrongAssign(&self->value_, value);
}

IOSObjectArray *PXRThumborUrlBuilder_HorizontalAlign_values() {
  PXRThumborUrlBuilder_HorizontalAlign_initialize();
  return [IOSObjectArray arrayWithObjects:PXRThumborUrlBuilder_HorizontalAlign_values_ count:3 type:PXRThumborUrlBuilder_HorizontalAlign_class_()];
}

PXRThumborUrlBuilder_HorizontalAlign *PXRThumborUrlBuilder_HorizontalAlign_valueOfWithNSString_(NSString *name) {
  PXRThumborUrlBuilder_HorizontalAlign_initialize();
  for (int i = 0; i < 3; i++) {
    PXRThumborUrlBuilder_HorizontalAlign *e = PXRThumborUrlBuilder_HorizontalAlign_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

PXRThumborUrlBuilder_HorizontalAlign *PXRThumborUrlBuilder_HorizontalAlign_fromOrdinal(NSUInteger ordinal) {
  PXRThumborUrlBuilder_HorizontalAlign_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return PXRThumborUrlBuilder_HorizontalAlign_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PXRThumborUrlBuilder_HorizontalAlign)

J2OBJC_INITIALIZED_DEFN(PXRThumborUrlBuilder_VerticalAlign)

PXRThumborUrlBuilder_VerticalAlign *PXRThumborUrlBuilder_VerticalAlign_values_[3];

@implementation PXRThumborUrlBuilder_VerticalAlign

+ (IOSObjectArray *)values {
  return PXRThumborUrlBuilder_VerticalAlign_values();
}

+ (PXRThumborUrlBuilder_VerticalAlign *)valueOfWithNSString:(NSString *)name {
  return PXRThumborUrlBuilder_VerticalAlign_valueOfWithNSString_(name);
}

- (PXRThumborUrlBuilder_VerticalAlign_Enum)toNSEnum {
  return (PXRThumborUrlBuilder_VerticalAlign_Enum)[self ordinal];
}

+ (void)initialize {
  if (self == [PXRThumborUrlBuilder_VerticalAlign class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 3 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    ((void) (JreEnum(PXRThumborUrlBuilder_VerticalAlign, TOP) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    PXRThumborUrlBuilder_VerticalAlign_initWithNSString_withNSString_withInt_(e, @"top", @"TOP", 0);
    ((void) (JreEnum(PXRThumborUrlBuilder_VerticalAlign, MIDDLE) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    PXRThumborUrlBuilder_VerticalAlign_initWithNSString_withNSString_withInt_(e, @"middle", @"MIDDLE", 1);
    ((void) (JreEnum(PXRThumborUrlBuilder_VerticalAlign, BOTTOM) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    PXRThumborUrlBuilder_VerticalAlign_initWithNSString_withNSString_withInt_(e, @"bottom", @"BOTTOM", 2);
    J2OBJC_SET_INITIALIZED(PXRThumborUrlBuilder_VerticalAlign)
  }
}

@end

void PXRThumborUrlBuilder_VerticalAlign_initWithNSString_withNSString_withInt_(PXRThumborUrlBuilder_VerticalAlign *self, NSString *value, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  JreStrongAssign(&self->value_, value);
}

IOSObjectArray *PXRThumborUrlBuilder_VerticalAlign_values() {
  PXRThumborUrlBuilder_VerticalAlign_initialize();
  return [IOSObjectArray arrayWithObjects:PXRThumborUrlBuilder_VerticalAlign_values_ count:3 type:PXRThumborUrlBuilder_VerticalAlign_class_()];
}

PXRThumborUrlBuilder_VerticalAlign *PXRThumborUrlBuilder_VerticalAlign_valueOfWithNSString_(NSString *name) {
  PXRThumborUrlBuilder_VerticalAlign_initialize();
  for (int i = 0; i < 3; i++) {
    PXRThumborUrlBuilder_VerticalAlign *e = PXRThumborUrlBuilder_VerticalAlign_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

PXRThumborUrlBuilder_VerticalAlign *PXRThumborUrlBuilder_VerticalAlign_fromOrdinal(NSUInteger ordinal) {
  PXRThumborUrlBuilder_VerticalAlign_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return PXRThumborUrlBuilder_VerticalAlign_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PXRThumborUrlBuilder_VerticalAlign)

J2OBJC_INITIALIZED_DEFN(PXRThumborUrlBuilder_TrimPixelColor)

PXRThumborUrlBuilder_TrimPixelColor *PXRThumborUrlBuilder_TrimPixelColor_values_[2];

@implementation PXRThumborUrlBuilder_TrimPixelColor

+ (IOSObjectArray *)values {
  return PXRThumborUrlBuilder_TrimPixelColor_values();
}

+ (PXRThumborUrlBuilder_TrimPixelColor *)valueOfWithNSString:(NSString *)name {
  return PXRThumborUrlBuilder_TrimPixelColor_valueOfWithNSString_(name);
}

- (PXRThumborUrlBuilder_TrimPixelColor_Enum)toNSEnum {
  return (PXRThumborUrlBuilder_TrimPixelColor_Enum)[self ordinal];
}

+ (void)initialize {
  if (self == [PXRThumborUrlBuilder_TrimPixelColor class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 2 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    ((void) (JreEnum(PXRThumborUrlBuilder_TrimPixelColor, TOP_LEFT) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    PXRThumborUrlBuilder_TrimPixelColor_initWithNSString_withNSString_withInt_(e, @"top-left", @"TOP_LEFT", 0);
    ((void) (JreEnum(PXRThumborUrlBuilder_TrimPixelColor, BOTTOM_RIGHT) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    PXRThumborUrlBuilder_TrimPixelColor_initWithNSString_withNSString_withInt_(e, @"bottom-right", @"BOTTOM_RIGHT", 1);
    J2OBJC_SET_INITIALIZED(PXRThumborUrlBuilder_TrimPixelColor)
  }
}

@end

void PXRThumborUrlBuilder_TrimPixelColor_initWithNSString_withNSString_withInt_(PXRThumborUrlBuilder_TrimPixelColor *self, NSString *value, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  JreStrongAssign(&self->value_, value);
}

IOSObjectArray *PXRThumborUrlBuilder_TrimPixelColor_values() {
  PXRThumborUrlBuilder_TrimPixelColor_initialize();
  return [IOSObjectArray arrayWithObjects:PXRThumborUrlBuilder_TrimPixelColor_values_ count:2 type:PXRThumborUrlBuilder_TrimPixelColor_class_()];
}

PXRThumborUrlBuilder_TrimPixelColor *PXRThumborUrlBuilder_TrimPixelColor_valueOfWithNSString_(NSString *name) {
  PXRThumborUrlBuilder_TrimPixelColor_initialize();
  for (int i = 0; i < 2; i++) {
    PXRThumborUrlBuilder_TrimPixelColor *e = PXRThumborUrlBuilder_TrimPixelColor_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

PXRThumborUrlBuilder_TrimPixelColor *PXRThumborUrlBuilder_TrimPixelColor_fromOrdinal(NSUInteger ordinal) {
  PXRThumborUrlBuilder_TrimPixelColor_initialize();
  if (ordinal >= 2) {
    return nil;
  }
  return PXRThumborUrlBuilder_TrimPixelColor_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PXRThumborUrlBuilder_TrimPixelColor)

J2OBJC_INITIALIZED_DEFN(PXRThumborUrlBuilder_ImageFormat)

PXRThumborUrlBuilder_ImageFormat *PXRThumborUrlBuilder_ImageFormat_values_[4];

@implementation PXRThumborUrlBuilder_ImageFormat

+ (IOSObjectArray *)values {
  return PXRThumborUrlBuilder_ImageFormat_values();
}

+ (PXRThumborUrlBuilder_ImageFormat *)valueOfWithNSString:(NSString *)name {
  return PXRThumborUrlBuilder_ImageFormat_valueOfWithNSString_(name);
}

- (PXRThumborUrlBuilder_ImageFormat_Enum)toNSEnum {
  return (PXRThumborUrlBuilder_ImageFormat_Enum)[self ordinal];
}

+ (void)initialize {
  if (self == [PXRThumborUrlBuilder_ImageFormat class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 4 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    ((void) (JreEnum(PXRThumborUrlBuilder_ImageFormat, GIF) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    PXRThumborUrlBuilder_ImageFormat_initWithNSString_withNSString_withInt_(e, @"gif", @"GIF", 0);
    ((void) (JreEnum(PXRThumborUrlBuilder_ImageFormat, JPEG) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    PXRThumborUrlBuilder_ImageFormat_initWithNSString_withNSString_withInt_(e, @"jpeg", @"JPEG", 1);
    ((void) (JreEnum(PXRThumborUrlBuilder_ImageFormat, PNG) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    PXRThumborUrlBuilder_ImageFormat_initWithNSString_withNSString_withInt_(e, @"png", @"PNG", 2);
    ((void) (JreEnum(PXRThumborUrlBuilder_ImageFormat, WEBP) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    PXRThumborUrlBuilder_ImageFormat_initWithNSString_withNSString_withInt_(e, @"webp", @"WEBP", 3);
    J2OBJC_SET_INITIALIZED(PXRThumborUrlBuilder_ImageFormat)
  }
}

@end

void PXRThumborUrlBuilder_ImageFormat_initWithNSString_withNSString_withInt_(PXRThumborUrlBuilder_ImageFormat *self, NSString *value, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  JreStrongAssign(&self->value_, value);
}

IOSObjectArray *PXRThumborUrlBuilder_ImageFormat_values() {
  PXRThumborUrlBuilder_ImageFormat_initialize();
  return [IOSObjectArray arrayWithObjects:PXRThumborUrlBuilder_ImageFormat_values_ count:4 type:PXRThumborUrlBuilder_ImageFormat_class_()];
}

PXRThumborUrlBuilder_ImageFormat *PXRThumborUrlBuilder_ImageFormat_valueOfWithNSString_(NSString *name) {
  PXRThumborUrlBuilder_ImageFormat_initialize();
  for (int i = 0; i < 4; i++) {
    PXRThumborUrlBuilder_ImageFormat *e = PXRThumborUrlBuilder_ImageFormat_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

PXRThumborUrlBuilder_ImageFormat *PXRThumborUrlBuilder_ImageFormat_fromOrdinal(NSUInteger ordinal) {
  PXRThumborUrlBuilder_ImageFormat_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return PXRThumborUrlBuilder_ImageFormat_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PXRThumborUrlBuilder_ImageFormat)
