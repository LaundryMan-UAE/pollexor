//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/3rdParty/pollexor/src/main/java/com/squareup/pollexor/ThumborUrlBuilder.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/squareup/pollexor/ThumborUrlBuilder.h"
#include "com/squareup/pollexor/Utilities.h"
#include "java/lang/CharSequence.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface PXRThumborUrlBuilder () {
}
@end

@interface PXRThumborUrlBuilder_HorizontalAlignEnum ()
- (instancetype)initWithNSString:(NSString *)value
                    withNSString:(NSString *)__name
                         withInt:(jint)__ordinal;
@end

@interface PXRThumborUrlBuilder_VerticalAlignEnum ()
- (instancetype)initWithNSString:(NSString *)value
                    withNSString:(NSString *)__name
                         withInt:(jint)__ordinal;
@end

@interface PXRThumborUrlBuilder_TrimPixelColorEnum ()
- (instancetype)initWithNSString:(NSString *)value
                    withNSString:(NSString *)__name
                         withInt:(jint)__ordinal;
@end

@interface PXRThumborUrlBuilder_ImageFormatEnum ()
- (instancetype)initWithNSString:(NSString *)value
                    withNSString:(NSString *)__name
                         withInt:(jint)__ordinal;
@end

@implementation PXRThumborUrlBuilder

NSString * PXRThumborUrlBuilder_PREFIX_UNSAFE_ = @"unsafe/";
NSString * PXRThumborUrlBuilder_PREFIX_META_ = @"meta/";
NSString * PXRThumborUrlBuilder_PART_SMART_ = @"smart";
NSString * PXRThumborUrlBuilder_PART_TRIM_ = @"trim";
NSString * PXRThumborUrlBuilder_PART_FIT_IN_ = @"fit-in";
NSString * PXRThumborUrlBuilder_PART_FILTERS_ = @"filters";
NSString * PXRThumborUrlBuilder_FILTER_BRIGHTNESS_ = @"brightness";
NSString * PXRThumborUrlBuilder_FILTER_CONTRAST_ = @"contrast";
NSString * PXRThumborUrlBuilder_FILTER_NOISE_ = @"noise";
NSString * PXRThumborUrlBuilder_FILTER_QUALITY_ = @"quality";
NSString * PXRThumborUrlBuilder_FILTER_RGB_ = @"rgb";
NSString * PXRThumborUrlBuilder_FILTER_ROUND_CORNER_ = @"round_corner";
NSString * PXRThumborUrlBuilder_FILTER_WATERMARK_ = @"watermark";
NSString * PXRThumborUrlBuilder_FILTER_SHARPEN_ = @"sharpen";
NSString * PXRThumborUrlBuilder_FILTER_FILL_ = @"fill";
NSString * PXRThumborUrlBuilder_FILTER_FORMAT_ = @"format";
NSString * PXRThumborUrlBuilder_FILTER_FRAME_ = @"frame";
NSString * PXRThumborUrlBuilder_FILTER_STRIP_ICC_ = @"strip_icc";
NSString * PXRThumborUrlBuilder_FILTER_GRAYSCALE_ = @"grayscale";
NSString * PXRThumborUrlBuilder_FILTER_EQUALIZE_ = @"equalize";
NSString * PXRThumborUrlBuilder_FILTER_BLUR_ = @"blur";
NSString * PXRThumborUrlBuilder_FILTER_NO_UPSCALE_ = @"no_upscale";
NSString * PXRThumborUrlBuilder_FILTER_ROTATE_ = @"rotate";

- (instancetype)initWithNSString:(NSString *)host
                    withNSString:(NSString *)key
                    withNSString:(NSString *)image {
  if (self = [super init]) {
    PXRThumborUrlBuilder_set_host_(self, host);
    PXRThumborUrlBuilder_set_key_(self, key);
    PXRThumborUrlBuilder_set_image_(self, image);
  }
  return self;
}

- (PXRThumborUrlBuilder *)resizeWithInt:(jint)width
                                withInt:(jint)height {
  if (width < 0 && width != PXRThumborUrlBuilder_ORIGINAL_SIZE) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Width must be a positive number."] autorelease];
  }
  if (height < 0 && height != PXRThumborUrlBuilder_ORIGINAL_SIZE) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Height must be a positive number."] autorelease];
  }
  if (width == 0 && height == 0) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Both width and height must not be zero."] autorelease];
  }
  hasResize_ = YES;
  resizeWidth_ = width;
  resizeHeight_ = height;
  return self;
}

- (PXRThumborUrlBuilder *)flipHorizontally {
  if (!hasResize_) {
    @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Image must be resized first in order to flip."] autorelease];
  }
  flipHorizontally__ = YES;
  return self;
}

- (PXRThumborUrlBuilder *)flipVertically {
  if (!hasResize_) {
    @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Image must be resized first in order to flip."] autorelease];
  }
  flipVertically__ = YES;
  return self;
}

- (PXRThumborUrlBuilder *)fitIn {
  if (!hasResize_) {
    @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Image must be resized first in order to apply 'fit-in'."] autorelease];
  }
  fitIn__ = YES;
  return self;
}

- (PXRThumborUrlBuilder *)cropWithInt:(jint)top
                              withInt:(jint)left
                              withInt:(jint)bottom
                              withInt:(jint)right {
  if (top < 0) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Top must be greater or equal to zero."] autorelease];
  }
  if (left < 0) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Left must be greater or equal to zero."] autorelease];
  }
  if (bottom < 1 || bottom <= top) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Bottom must be greater than zero and top."] autorelease];
  }
  if (right < 1 || right <= left) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Right must be greater than zero and left."] autorelease];
  }
  hasCrop_ = YES;
  cropTop_ = top;
  cropLeft_ = left;
  cropBottom_ = bottom;
  cropRight_ = right;
  return self;
}

- (PXRThumborUrlBuilder *)alignWithPXRThumborUrlBuilder_HorizontalAlignEnum:(PXRThumborUrlBuilder_HorizontalAlignEnum *)align {
  if (!hasResize_) {
    @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Image must be resized first in order to align."] autorelease];
  }
  PXRThumborUrlBuilder_set_cropHorizontalAlign_(self, align);
  return self;
}

- (PXRThumborUrlBuilder *)alignWithPXRThumborUrlBuilder_VerticalAlignEnum:(PXRThumborUrlBuilder_VerticalAlignEnum *)align {
  if (!hasResize_) {
    @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Image must be resized first in order to align."] autorelease];
  }
  PXRThumborUrlBuilder_set_cropVerticalAlign_(self, align);
  return self;
}

- (PXRThumborUrlBuilder *)alignWithPXRThumborUrlBuilder_VerticalAlignEnum:(PXRThumborUrlBuilder_VerticalAlignEnum *)valign
                             withPXRThumborUrlBuilder_HorizontalAlignEnum:(PXRThumborUrlBuilder_HorizontalAlignEnum *)halign {
  return [((PXRThumborUrlBuilder *) nil_chk([self alignWithPXRThumborUrlBuilder_VerticalAlignEnum:valign])) alignWithPXRThumborUrlBuilder_HorizontalAlignEnum:halign];
}

- (PXRThumborUrlBuilder *)smart {
  if (!hasResize_) {
    @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Image must be resized first in order to smart align."] autorelease];
  }
  isSmart_ = YES;
  return self;
}

- (PXRThumborUrlBuilder *)trim {
  return [self trimWithPXRThumborUrlBuilder_TrimPixelColorEnum:nil];
}

- (PXRThumborUrlBuilder *)trimWithPXRThumborUrlBuilder_TrimPixelColorEnum:(PXRThumborUrlBuilder_TrimPixelColorEnum *)value {
  return [self trimWithPXRThumborUrlBuilder_TrimPixelColorEnum:value withInt:0];
}

- (PXRThumborUrlBuilder *)trimWithPXRThumborUrlBuilder_TrimPixelColorEnum:(PXRThumborUrlBuilder_TrimPixelColorEnum *)value
                                                                  withInt:(jint)colorTolerance {
  if (colorTolerance < 0 || colorTolerance > 442) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Color tolerance must be between 0 and 442."] autorelease];
  }
  if (colorTolerance > 0 && value == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Trim pixel color value must not be null."] autorelease];
  }
  isTrim_ = YES;
  PXRThumborUrlBuilder_set_trimPixelColor_(self, value);
  trimColorTolerance_ = colorTolerance;
  return self;
}

- (PXRThumborUrlBuilder *)filterWithNSStringArray:(IOSObjectArray *)filters {
  if (((IOSObjectArray *) nil_chk(filters))->size_ == 0) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"You must provide at least one filter."] autorelease];
  }
  if (self->filters_ == nil) {
    PXRThumborUrlBuilder_setAndConsume_filters_(self, [[JavaUtilArrayList alloc] initWithInt:filters->size_]);
  }
  {
    IOSObjectArray *a__ = filters;
    NSString * const *b__ = a__->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *filter = *b__++;
      if (filter == nil || ((jint) [filter length]) == 0) {
        @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Filter must not be blank."] autorelease];
      }
      [((id<JavaUtilList>) nil_chk(self->filters_)) addWithId:filter];
    }
  }
  return self;
}

- (NSString *)toUrl {
  return (key_ == nil) ? [self toUrlUnsafe] : [self toUrlSafe];
}

- (NSString *)toUrlUnsafe {
  return JreStrcat("$$@", host_, PXRThumborUrlBuilder_PREFIX_UNSAFE_, [self assembleConfigWithBoolean:NO]);
}

- (NSString *)toUrlSafe {
  if (key_ == nil) {
    @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Cannot build safe URL without a key."] autorelease];
  }
  JavaLangStringBuilder *config = [self assembleConfigWithBoolean:NO];
  IOSByteArray *encrypted = PXRUtilities_hmacSha1WithJavaLangStringBuilder_withNSString_(config, key_);
  NSString *encoded = PXRUtilities_base64EncodeWithByteArray_(encrypted);
  id<JavaLangCharSequence> suffix = config;
  return JreStrcat("$$C@", host_, encoded, '/', suffix);
}

- (NSString *)toMeta {
  return (key_ == nil) ? [self toMetaUnsafe] : [self toMetaSafe];
}

- (NSString *)toMetaUnsafe {
  return JreStrcat("$@", host_, [self assembleConfigWithBoolean:YES]);
}

- (NSString *)toMetaSafe {
  JavaLangStringBuilder *config = [self assembleConfigWithBoolean:YES];
  IOSByteArray *encrypted = PXRUtilities_hmacSha1WithJavaLangStringBuilder_withNSString_(config, key_);
  NSString *encoded = PXRUtilities_base64EncodeWithByteArray_(encrypted);
  return JreStrcat("$$C@", host_, encoded, '/', config);
}

- (NSString *)description {
  return [self toUrl];
}

- (JavaLangStringBuilder *)assembleConfigWithBoolean:(jboolean)meta {
  JavaLangStringBuilder *builder = [[[JavaLangStringBuilder alloc] init] autorelease];
  if (meta) {
    [builder appendWithNSString:PXRThumborUrlBuilder_PREFIX_META_];
  }
  if (isTrim_) {
    [builder appendWithNSString:PXRThumborUrlBuilder_PART_TRIM_];
    if (trimPixelColor_ != nil) {
      [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:@":"])) appendWithNSString:trimPixelColor_->value_];
      if (trimColorTolerance_ > 0) {
        [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:@":"])) appendWithInt:trimColorTolerance_];
      }
    }
    [builder appendWithNSString:@"/"];
  }
  if (hasCrop_) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([builder appendWithInt:cropLeft_])) appendWithNSString:@"x"])) appendWithInt:cropTop_])) appendWithNSString:@":"])) appendWithInt:cropRight_])) appendWithNSString:@"x"])) appendWithInt:cropBottom_];
    [builder appendWithNSString:@"/"];
  }
  if (hasResize_) {
    if (fitIn__) {
      [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:PXRThumborUrlBuilder_PART_FIT_IN_])) appendWithNSString:@"/"];
    }
    if (flipHorizontally__) {
      [builder appendWithNSString:@"-"];
    }
    if (resizeWidth_ == PXRThumborUrlBuilder_ORIGINAL_SIZE) {
      [builder appendWithNSString:@"orig"];
    }
    else {
      [builder appendWithInt:resizeWidth_];
    }
    [builder appendWithNSString:@"x"];
    if (flipVertically__) {
      [builder appendWithNSString:@"-"];
    }
    if (resizeHeight_ == PXRThumborUrlBuilder_ORIGINAL_SIZE) {
      [builder appendWithNSString:@"orig"];
    }
    else {
      [builder appendWithInt:resizeHeight_];
    }
    if (isSmart_) {
      [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:@"/"])) appendWithNSString:PXRThumborUrlBuilder_PART_SMART_];
    }
    else {
      if (cropHorizontalAlign_ != nil) {
        [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:@"/"])) appendWithNSString:cropHorizontalAlign_->value_];
      }
      if (cropVerticalAlign_ != nil) {
        [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:@"/"])) appendWithNSString:cropVerticalAlign_->value_];
      }
    }
    [builder appendWithNSString:@"/"];
  }
  if (filters_ != nil) {
    [builder appendWithNSString:PXRThumborUrlBuilder_PART_FILTERS_];
    for (NSString * __strong filter in filters_) {
      [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:@":"])) appendWithNSString:filter];
    }
    [builder appendWithNSString:@"/"];
  }
  [builder appendWithNSString:image_];
  return builder;
}

+ (NSString *)brightnessWithInt:(jint)amount {
  return PXRThumborUrlBuilder_brightnessWithInt_(amount);
}

+ (NSString *)contrastWithInt:(jint)amount {
  return PXRThumborUrlBuilder_contrastWithInt_(amount);
}

+ (NSString *)noiseWithInt:(jint)amount {
  return PXRThumborUrlBuilder_noiseWithInt_(amount);
}

+ (NSString *)qualityWithInt:(jint)amount {
  return PXRThumborUrlBuilder_qualityWithInt_(amount);
}

+ (NSString *)rgbWithInt:(jint)r
                 withInt:(jint)g
                 withInt:(jint)b {
  return PXRThumborUrlBuilder_rgbWithInt_withInt_withInt_(r, g, b);
}

+ (NSString *)roundCornerWithInt:(jint)radius {
  return PXRThumborUrlBuilder_roundCornerWithInt_(radius);
}

+ (NSString *)roundCornerWithInt:(jint)radius
                         withInt:(jint)color {
  return PXRThumborUrlBuilder_roundCornerWithInt_withInt_(radius, color);
}

+ (NSString *)roundCornerWithInt:(jint)radiusInner
                         withInt:(jint)radiusOuter
                         withInt:(jint)color {
  return PXRThumborUrlBuilder_roundCornerWithInt_withInt_withInt_(radiusInner, radiusOuter, color);
}

+ (NSString *)watermarkWithNSString:(NSString *)imageUrl {
  return PXRThumborUrlBuilder_watermarkWithNSString_(imageUrl);
}

+ (NSString *)watermarkWithPXRThumborUrlBuilder:(PXRThumborUrlBuilder *)image {
  return PXRThumborUrlBuilder_watermarkWithPXRThumborUrlBuilder_(image);
}

+ (NSString *)watermarkWithNSString:(NSString *)imageUrl
                            withInt:(jint)x
                            withInt:(jint)y {
  return PXRThumborUrlBuilder_watermarkWithNSString_withInt_withInt_(imageUrl, x, y);
}

+ (NSString *)watermarkWithPXRThumborUrlBuilder:(PXRThumborUrlBuilder *)image
                                        withInt:(jint)x
                                        withInt:(jint)y {
  return PXRThumborUrlBuilder_watermarkWithPXRThumborUrlBuilder_withInt_withInt_(image, x, y);
}

+ (NSString *)watermarkWithNSString:(NSString *)imageUrl
                            withInt:(jint)x
                            withInt:(jint)y
                            withInt:(jint)transparency {
  return PXRThumborUrlBuilder_watermarkWithNSString_withInt_withInt_withInt_(imageUrl, x, y, transparency);
}

+ (NSString *)watermarkWithPXRThumborUrlBuilder:(PXRThumborUrlBuilder *)image
                                        withInt:(jint)x
                                        withInt:(jint)y
                                        withInt:(jint)transparency {
  return PXRThumborUrlBuilder_watermarkWithPXRThumborUrlBuilder_withInt_withInt_withInt_(image, x, y, transparency);
}

+ (NSString *)sharpenWithFloat:(jfloat)amount
                     withFloat:(jfloat)radius
                   withBoolean:(jboolean)luminanceOnly {
  return PXRThumborUrlBuilder_sharpenWithFloat_withFloat_withBoolean_(amount, radius, luminanceOnly);
}

+ (NSString *)fillWithInt:(jint)color {
  return PXRThumborUrlBuilder_fillWithInt_(color);
}

+ (NSString *)formatWithPXRThumborUrlBuilder_ImageFormatEnum:(PXRThumborUrlBuilder_ImageFormatEnum *)format {
  return PXRThumborUrlBuilder_formatWithPXRThumborUrlBuilder_ImageFormatEnum_(format);
}

+ (NSString *)frameWithNSString:(NSString *)imageUrl {
  return PXRThumborUrlBuilder_frameWithNSString_(imageUrl);
}

+ (NSString *)stripicc {
  return PXRThumborUrlBuilder_stripicc();
}

+ (NSString *)grayscale {
  return PXRThumborUrlBuilder_grayscale();
}

+ (NSString *)equalize {
  return PXRThumborUrlBuilder_equalize();
}

+ (NSString *)blurWithInt:(jint)radius {
  return PXRThumborUrlBuilder_blurWithInt_(radius);
}

+ (NSString *)blurWithInt:(jint)radius
                  withInt:(jint)sigma {
  return PXRThumborUrlBuilder_blurWithInt_withInt_(radius, sigma);
}

+ (NSString *)noUpscale {
  return PXRThumborUrlBuilder_noUpscale();
}

+ (NSString *)rotateWithInt:(jint)angle {
  return PXRThumborUrlBuilder_rotateWithInt_(angle);
}

- (void)dealloc {
  RELEASE_(image_);
  RELEASE_(host_);
  RELEASE_(key_);
  RELEASE_(cropHorizontalAlign_);
  RELEASE_(cropVerticalAlign_);
  RELEASE_(trimPixelColor_);
  RELEASE_(filters_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(PXRThumborUrlBuilder *)other {
  [super copyAllFieldsTo:other];
  PXRThumborUrlBuilder_set_image_(other, image_);
  PXRThumborUrlBuilder_set_host_(other, host_);
  PXRThumborUrlBuilder_set_key_(other, key_);
  other->hasCrop_ = hasCrop_;
  other->hasResize_ = hasResize_;
  other->isSmart_ = isSmart_;
  other->isTrim_ = isTrim_;
  other->flipHorizontally__ = flipHorizontally__;
  other->flipVertically__ = flipVertically__;
  other->fitIn__ = fitIn__;
  other->resizeWidth_ = resizeWidth_;
  other->resizeHeight_ = resizeHeight_;
  other->cropTop_ = cropTop_;
  other->cropLeft_ = cropLeft_;
  other->cropBottom_ = cropBottom_;
  other->cropRight_ = cropRight_;
  other->trimColorTolerance_ = trimColorTolerance_;
  PXRThumborUrlBuilder_set_cropHorizontalAlign_(other, cropHorizontalAlign_);
  PXRThumborUrlBuilder_set_cropVerticalAlign_(other, cropVerticalAlign_);
  PXRThumborUrlBuilder_set_trimPixelColor_(other, trimPixelColor_);
  PXRThumborUrlBuilder_set_filters_(other, filters_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:withNSString:", "ThumborUrlBuilder", NULL, 0x0, NULL },
    { "resizeWithInt:withInt:", "resize", "Lcom.squareup.pollexor.ThumborUrlBuilder;", 0x1, NULL },
    { "flipHorizontally", NULL, "Lcom.squareup.pollexor.ThumborUrlBuilder;", 0x1, NULL },
    { "flipVertically", NULL, "Lcom.squareup.pollexor.ThumborUrlBuilder;", 0x1, NULL },
    { "fitIn", NULL, "Lcom.squareup.pollexor.ThumborUrlBuilder;", 0x1, NULL },
    { "cropWithInt:withInt:withInt:withInt:", "crop", "Lcom.squareup.pollexor.ThumborUrlBuilder;", 0x1, NULL },
    { "alignWithPXRThumborUrlBuilder_HorizontalAlignEnum:", "align", "Lcom.squareup.pollexor.ThumborUrlBuilder;", 0x1, NULL },
    { "alignWithPXRThumborUrlBuilder_VerticalAlignEnum:", "align", "Lcom.squareup.pollexor.ThumborUrlBuilder;", 0x1, NULL },
    { "alignWithPXRThumborUrlBuilder_VerticalAlignEnum:withPXRThumborUrlBuilder_HorizontalAlignEnum:", "align", "Lcom.squareup.pollexor.ThumborUrlBuilder;", 0x1, NULL },
    { "smart", NULL, "Lcom.squareup.pollexor.ThumborUrlBuilder;", 0x1, NULL },
    { "trim", NULL, "Lcom.squareup.pollexor.ThumborUrlBuilder;", 0x1, NULL },
    { "trimWithPXRThumborUrlBuilder_TrimPixelColorEnum:", "trim", "Lcom.squareup.pollexor.ThumborUrlBuilder;", 0x1, NULL },
    { "trimWithPXRThumborUrlBuilder_TrimPixelColorEnum:withInt:", "trim", "Lcom.squareup.pollexor.ThumborUrlBuilder;", 0x1, NULL },
    { "filterWithNSStringArray:", "filter", "Lcom.squareup.pollexor.ThumborUrlBuilder;", 0x81, NULL },
    { "toUrl", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "toUrlUnsafe", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "toUrlSafe", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "toMeta", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "toMetaUnsafe", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "toMetaSafe", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "assembleConfigWithBoolean:", "assembleConfig", "Ljava.lang.StringBuilder;", 0x0, NULL },
    { "brightnessWithInt:", "brightness", "Ljava.lang.String;", 0x9, NULL },
    { "contrastWithInt:", "contrast", "Ljava.lang.String;", 0x9, NULL },
    { "noiseWithInt:", "noise", "Ljava.lang.String;", 0x9, NULL },
    { "qualityWithInt:", "quality", "Ljava.lang.String;", 0x9, NULL },
    { "rgbWithInt:withInt:withInt:", "rgb", "Ljava.lang.String;", 0x9, NULL },
    { "roundCornerWithInt:", "roundCorner", "Ljava.lang.String;", 0x9, NULL },
    { "roundCornerWithInt:withInt:", "roundCorner", "Ljava.lang.String;", 0x9, NULL },
    { "roundCornerWithInt:withInt:withInt:", "roundCorner", "Ljava.lang.String;", 0x9, NULL },
    { "watermarkWithNSString:", "watermark", "Ljava.lang.String;", 0x9, NULL },
    { "watermarkWithPXRThumborUrlBuilder:", "watermark", "Ljava.lang.String;", 0x9, NULL },
    { "watermarkWithNSString:withInt:withInt:", "watermark", "Ljava.lang.String;", 0x9, NULL },
    { "watermarkWithPXRThumborUrlBuilder:withInt:withInt:", "watermark", "Ljava.lang.String;", 0x9, NULL },
    { "watermarkWithNSString:withInt:withInt:withInt:", "watermark", "Ljava.lang.String;", 0x9, NULL },
    { "watermarkWithPXRThumborUrlBuilder:withInt:withInt:withInt:", "watermark", "Ljava.lang.String;", 0x9, NULL },
    { "sharpenWithFloat:withFloat:withBoolean:", "sharpen", "Ljava.lang.String;", 0x9, NULL },
    { "fillWithInt:", "fill", "Ljava.lang.String;", 0x9, NULL },
    { "formatWithPXRThumborUrlBuilder_ImageFormatEnum:", "format", "Ljava.lang.String;", 0x9, NULL },
    { "frameWithNSString:", "frame", "Ljava.lang.String;", 0x9, NULL },
    { "stripicc", NULL, "Ljava.lang.String;", 0x9, NULL },
    { "grayscale", NULL, "Ljava.lang.String;", 0x9, NULL },
    { "equalize", NULL, "Ljava.lang.String;", 0x9, NULL },
    { "blurWithInt:", "blur", "Ljava.lang.String;", 0x9, NULL },
    { "blurWithInt:withInt:", "blur", "Ljava.lang.String;", 0x9, NULL },
    { "noUpscale", NULL, "Ljava.lang.String;", 0x9, NULL },
    { "rotateWithInt:", "rotate", "Ljava.lang.String;", 0x9, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX_UNSAFE_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_PREFIX_UNSAFE_,  },
    { "PREFIX_META_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_PREFIX_META_,  },
    { "PART_SMART_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_PART_SMART_,  },
    { "PART_TRIM_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_PART_TRIM_,  },
    { "PART_FIT_IN_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_PART_FIT_IN_,  },
    { "PART_FILTERS_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_PART_FILTERS_,  },
    { "FILTER_BRIGHTNESS_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_BRIGHTNESS_,  },
    { "FILTER_CONTRAST_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_CONTRAST_,  },
    { "FILTER_NOISE_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_NOISE_,  },
    { "FILTER_QUALITY_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_QUALITY_,  },
    { "FILTER_RGB_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_RGB_,  },
    { "FILTER_ROUND_CORNER_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_ROUND_CORNER_,  },
    { "FILTER_WATERMARK_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_WATERMARK_,  },
    { "FILTER_SHARPEN_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_SHARPEN_,  },
    { "FILTER_FILL_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_FILL_,  },
    { "FILTER_FORMAT_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_FORMAT_,  },
    { "FILTER_FRAME_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_FRAME_,  },
    { "FILTER_STRIP_ICC_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_STRIP_ICC_,  },
    { "FILTER_GRAYSCALE_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_GRAYSCALE_,  },
    { "FILTER_EQUALIZE_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_EQUALIZE_,  },
    { "FILTER_BLUR_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_BLUR_,  },
    { "FILTER_NO_UPSCALE_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_NO_UPSCALE_,  },
    { "FILTER_ROTATE_", NULL, 0x1a, "Ljava.lang.String;", &PXRThumborUrlBuilder_FILTER_ROTATE_,  },
    { "ORIGINAL_SIZE_", NULL, 0x19, "I", NULL, .constantValue.asInt = PXRThumborUrlBuilder_ORIGINAL_SIZE },
    { "image_", NULL, 0x10, "Ljava.lang.String;", NULL,  },
    { "host_", NULL, 0x10, "Ljava.lang.String;", NULL,  },
    { "key_", NULL, 0x10, "Ljava.lang.String;", NULL,  },
    { "hasCrop_", NULL, 0x0, "Z", NULL,  },
    { "hasResize_", NULL, 0x0, "Z", NULL,  },
    { "isSmart_", NULL, 0x0, "Z", NULL,  },
    { "isTrim_", NULL, 0x0, "Z", NULL,  },
    { "flipHorizontally__", "flipHorizontally", 0x0, "Z", NULL,  },
    { "flipVertically__", "flipVertically", 0x0, "Z", NULL,  },
    { "fitIn__", "fitIn", 0x0, "Z", NULL,  },
    { "resizeWidth_", NULL, 0x0, "I", NULL,  },
    { "resizeHeight_", NULL, 0x0, "I", NULL,  },
    { "cropTop_", NULL, 0x0, "I", NULL,  },
    { "cropLeft_", NULL, 0x0, "I", NULL,  },
    { "cropBottom_", NULL, 0x0, "I", NULL,  },
    { "cropRight_", NULL, 0x0, "I", NULL,  },
    { "trimColorTolerance_", NULL, 0x0, "I", NULL,  },
    { "cropHorizontalAlign_", NULL, 0x0, "Lcom.squareup.pollexor.ThumborUrlBuilder$HorizontalAlign;", NULL,  },
    { "cropVerticalAlign_", NULL, 0x0, "Lcom.squareup.pollexor.ThumborUrlBuilder$VerticalAlign;", NULL,  },
    { "trimPixelColor_", NULL, 0x0, "Lcom.squareup.pollexor.ThumborUrlBuilder$TrimPixelColor;", NULL,  },
    { "filters_", NULL, 0x0, "Ljava.util.List;", NULL,  },
  };
  static const J2ObjcClassInfo _PXRThumborUrlBuilder = { 1, "ThumborUrlBuilder", "com.squareup.pollexor", NULL, 0x11, 47, methods, 45, fields, 0, NULL};
  return &_PXRThumborUrlBuilder;
}

@end

NSString *PXRThumborUrlBuilder_brightnessWithInt_(jint amount) {
  PXRThumborUrlBuilder_init();
  if (amount < -100 || amount > 100) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Amount must be between -100 and 100, inclusive."] autorelease];
  }
  return JreStrcat("$CIC", PXRThumborUrlBuilder_FILTER_BRIGHTNESS_, '(', amount, ')');
}

NSString *PXRThumborUrlBuilder_contrastWithInt_(jint amount) {
  PXRThumborUrlBuilder_init();
  if (amount < -100 || amount > 100) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Amount must be between -100 and 100, inclusive."] autorelease];
  }
  return JreStrcat("$CIC", PXRThumborUrlBuilder_FILTER_CONTRAST_, '(', amount, ')');
}

NSString *PXRThumborUrlBuilder_noiseWithInt_(jint amount) {
  PXRThumborUrlBuilder_init();
  if (amount < 0 || amount > 100) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Amount must be between 0 and 100, inclusive"] autorelease];
  }
  return JreStrcat("$CIC", PXRThumborUrlBuilder_FILTER_NOISE_, '(', amount, ')');
}

NSString *PXRThumborUrlBuilder_qualityWithInt_(jint amount) {
  PXRThumborUrlBuilder_init();
  if (amount < 0 || amount > 100) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Amount must be between 0 and 100, inclusive."] autorelease];
  }
  return JreStrcat("$CIC", PXRThumborUrlBuilder_FILTER_QUALITY_, '(', amount, ')');
}

NSString *PXRThumborUrlBuilder_rgbWithInt_withInt_withInt_(jint r, jint g, jint b) {
  PXRThumborUrlBuilder_init();
  if (r < -100 || r > 100) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Red value must be between -100 and 100, inclusive."] autorelease];
  }
  if (g < -100 || g > 100) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Green value must be between -100 and 100, inclusive."] autorelease];
  }
  if (b < -100 || b > 100) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Blue value must be between -100 and 100, inclusive."] autorelease];
  }
  return JreStrcat("$CICICIC", PXRThumborUrlBuilder_FILTER_RGB_, '(', r, ',', g, ',', b, ')');
}

NSString *PXRThumborUrlBuilder_roundCornerWithInt_(jint radius) {
  PXRThumborUrlBuilder_init();
  return PXRThumborUrlBuilder_roundCornerWithInt_withInt_(radius, (jint) 0xFFFFFF);
}

NSString *PXRThumborUrlBuilder_roundCornerWithInt_withInt_(jint radius, jint color) {
  PXRThumborUrlBuilder_init();
  return PXRThumborUrlBuilder_roundCornerWithInt_withInt_withInt_(radius, 0, color);
}

NSString *PXRThumborUrlBuilder_roundCornerWithInt_withInt_withInt_(jint radiusInner, jint radiusOuter, jint color) {
  PXRThumborUrlBuilder_init();
  if (radiusInner < 1) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Radius must be greater than zero."] autorelease];
  }
  if (radiusOuter < 0) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Outer radius must be greater than or equal to zero."] autorelease];
  }
  JavaLangStringBuilder *builder = [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) [[[JavaLangStringBuilder alloc] initWithNSString:PXRThumborUrlBuilder_FILTER_ROUND_CORNER_] autorelease]) appendWithNSString:@"("])) appendWithInt:radiusInner];
  if (radiusOuter > 0) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(builder)) appendWithNSString:@"|"])) appendWithInt:radiusOuter];
  }
  jint r = URShift32((color & (jint) 0xFF0000), 16);
  jint g = URShift32((color & (jint) 0xFF00), 8);
  jint b = color & (jint) 0xFF;
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(builder)) appendWithNSString:@","])) appendWithInt:r])) appendWithNSString:@","])) appendWithInt:g])) appendWithNSString:@","])) appendWithInt:b])) appendWithNSString:@")"])) description];
}

NSString *PXRThumborUrlBuilder_watermarkWithNSString_(NSString *imageUrl) {
  PXRThumborUrlBuilder_init();
  return PXRThumborUrlBuilder_watermarkWithNSString_withInt_withInt_(imageUrl, 0, 0);
}

NSString *PXRThumborUrlBuilder_watermarkWithPXRThumborUrlBuilder_(PXRThumborUrlBuilder *image) {
  PXRThumborUrlBuilder_init();
  return PXRThumborUrlBuilder_watermarkWithPXRThumborUrlBuilder_withInt_withInt_(image, 0, 0);
}

NSString *PXRThumborUrlBuilder_watermarkWithNSString_withInt_withInt_(NSString *imageUrl, jint x, jint y) {
  PXRThumborUrlBuilder_init();
  return PXRThumborUrlBuilder_watermarkWithNSString_withInt_withInt_withInt_(imageUrl, x, y, 0);
}

NSString *PXRThumborUrlBuilder_watermarkWithPXRThumborUrlBuilder_withInt_withInt_(PXRThumborUrlBuilder *image, jint x, jint y) {
  PXRThumborUrlBuilder_init();
  if (image == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Image must not be null."] autorelease];
  }
  return PXRThumborUrlBuilder_watermarkWithNSString_withInt_withInt_withInt_([((PXRThumborUrlBuilder *) nil_chk(image)) description], x, y, 0);
}

NSString *PXRThumborUrlBuilder_watermarkWithNSString_withInt_withInt_withInt_(NSString *imageUrl, jint x, jint y, jint transparency) {
  PXRThumborUrlBuilder_init();
  if (imageUrl == nil || ((jint) [imageUrl length]) == 0) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Image URL must not be blank."] autorelease];
  }
  if (transparency < 0 || transparency > 100) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Transparency must be between 0 and 100, inclusive."] autorelease];
  }
  return JreStrcat("$C$CICICIC", PXRThumborUrlBuilder_FILTER_WATERMARK_, '(', imageUrl, ',', x, ',', y, ',', transparency, ')');
}

NSString *PXRThumborUrlBuilder_watermarkWithPXRThumborUrlBuilder_withInt_withInt_withInt_(PXRThumborUrlBuilder *image, jint x, jint y, jint transparency) {
  PXRThumborUrlBuilder_init();
  if (image == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Image must not be null."] autorelease];
  }
  return PXRThumborUrlBuilder_watermarkWithNSString_withInt_withInt_withInt_([((PXRThumborUrlBuilder *) nil_chk(image)) description], x, y, transparency);
}

NSString *PXRThumborUrlBuilder_sharpenWithFloat_withFloat_withBoolean_(jfloat amount, jfloat radius, jboolean luminanceOnly) {
  PXRThumborUrlBuilder_init();
  return JreStrcat("$CFCFCZC", PXRThumborUrlBuilder_FILTER_SHARPEN_, '(', amount, ',', radius, ',', luminanceOnly, ')');
}

NSString *PXRThumborUrlBuilder_fillWithInt_(jint color) {
  PXRThumborUrlBuilder_init();
  NSString *colorCode = JavaLangInteger_toHexStringWithInt_(color & (jint) 0xFFFFFF);
  return JreStrcat("$C$C", PXRThumborUrlBuilder_FILTER_FILL_, '(', colorCode, ')');
}

NSString *PXRThumborUrlBuilder_formatWithPXRThumborUrlBuilder_ImageFormatEnum_(PXRThumborUrlBuilder_ImageFormatEnum *format) {
  PXRThumborUrlBuilder_init();
  if (format == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"You must specify an image format."] autorelease];
  }
  return JreStrcat("$C$C", PXRThumborUrlBuilder_FILTER_FORMAT_, '(', ((PXRThumborUrlBuilder_ImageFormatEnum *) nil_chk(format))->value_, ')');
}

NSString *PXRThumborUrlBuilder_frameWithNSString_(NSString *imageUrl) {
  PXRThumborUrlBuilder_init();
  if (imageUrl == nil || ((jint) [imageUrl length]) == 0) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Image URL must not be blank."] autorelease];
  }
  return JreStrcat("$C$C", PXRThumborUrlBuilder_FILTER_FRAME_, '(', imageUrl, ')');
}

NSString *PXRThumborUrlBuilder_stripicc() {
  PXRThumborUrlBuilder_init();
  return JreStrcat("$$", PXRThumborUrlBuilder_FILTER_STRIP_ICC_, @"()");
}

NSString *PXRThumborUrlBuilder_grayscale() {
  PXRThumborUrlBuilder_init();
  return JreStrcat("$$", PXRThumborUrlBuilder_FILTER_GRAYSCALE_, @"()");
}

NSString *PXRThumborUrlBuilder_equalize() {
  PXRThumborUrlBuilder_init();
  return JreStrcat("$$", PXRThumborUrlBuilder_FILTER_EQUALIZE_, @"()");
}

NSString *PXRThumborUrlBuilder_blurWithInt_(jint radius) {
  PXRThumborUrlBuilder_init();
  return PXRThumborUrlBuilder_blurWithInt_withInt_(radius, 0);
}

NSString *PXRThumborUrlBuilder_blurWithInt_withInt_(jint radius, jint sigma) {
  PXRThumborUrlBuilder_init();
  if (radius < 1) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Radius must be greater than zero."] autorelease];
  }
  if (radius > 150) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Radius must be lower or equal than 150."] autorelease];
  }
  if (sigma < 0) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Sigma must be greater than zero."] autorelease];
  }
  return JreStrcat("$CICIC", PXRThumborUrlBuilder_FILTER_BLUR_, '(', radius, ',', sigma, ')');
}

NSString *PXRThumborUrlBuilder_noUpscale() {
  PXRThumborUrlBuilder_init();
  return JreStrcat("$$", PXRThumborUrlBuilder_FILTER_NO_UPSCALE_, @"()");
}

NSString *PXRThumborUrlBuilder_rotateWithInt_(jint angle) {
  PXRThumborUrlBuilder_init();
  if (angle % 90 != 0) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Angle must be multiple of 90\u00b0"] autorelease];
  }
  return JreStrcat("$CIC", PXRThumborUrlBuilder_FILTER_ROTATE_, '(', angle, ')');
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PXRThumborUrlBuilder)

BOOL PXRThumborUrlBuilder_HorizontalAlignEnum_initialized = NO;

PXRThumborUrlBuilder_HorizontalAlignEnum *PXRThumborUrlBuilder_HorizontalAlignEnum_values_[3];

@implementation PXRThumborUrlBuilder_HorizontalAlignEnum

- (instancetype)initWithNSString:(NSString *)value
                    withNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  if (self = [super initWithNSString:__name withInt:__ordinal]) {
    PXRThumborUrlBuilder_HorizontalAlignEnum_set_value_(self, value);
  }
  return self;
}

IOSObjectArray *PXRThumborUrlBuilder_HorizontalAlignEnum_values() {
  PXRThumborUrlBuilder_HorizontalAlignEnum_init();
  return [IOSObjectArray arrayWithObjects:PXRThumborUrlBuilder_HorizontalAlignEnum_values_ count:3 type:PXRThumborUrlBuilder_HorizontalAlignEnum_class_()];
}
+ (IOSObjectArray *)values {
  return PXRThumborUrlBuilder_HorizontalAlignEnum_values();
}

+ (PXRThumborUrlBuilder_HorizontalAlignEnum *)valueOfWithNSString:(NSString *)name {
  return PXRThumborUrlBuilder_HorizontalAlignEnum_valueOfWithNSString_(name);
}

PXRThumborUrlBuilder_HorizontalAlignEnum *PXRThumborUrlBuilder_HorizontalAlignEnum_valueOfWithNSString_(NSString *name) {
  PXRThumborUrlBuilder_HorizontalAlignEnum_init();
  for (int i = 0; i < 3; i++) {
    PXRThumborUrlBuilder_HorizontalAlignEnum *e = PXRThumborUrlBuilder_HorizontalAlignEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [PXRThumborUrlBuilder_HorizontalAlignEnum class]) {
    PXRThumborUrlBuilder_HorizontalAlignEnum_LEFT = [[PXRThumborUrlBuilder_HorizontalAlignEnum alloc] initWithNSString:@"left" withNSString:@"LEFT" withInt:0];
    PXRThumborUrlBuilder_HorizontalAlignEnum_CENTER = [[PXRThumborUrlBuilder_HorizontalAlignEnum alloc] initWithNSString:@"center" withNSString:@"CENTER" withInt:1];
    PXRThumborUrlBuilder_HorizontalAlignEnum_RIGHT = [[PXRThumborUrlBuilder_HorizontalAlignEnum alloc] initWithNSString:@"right" withNSString:@"RIGHT" withInt:2];
    J2OBJC_SET_INITIALIZED(PXRThumborUrlBuilder_HorizontalAlignEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:withInt:", "HorizontalAlign", NULL, 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "LEFT", "LEFT", 0x4019, "Lcom.squareup.pollexor.ThumborUrlBuilder$HorizontalAlign;", &PXRThumborUrlBuilder_HorizontalAlignEnum_LEFT,  },
    { "CENTER", "CENTER", 0x4019, "Lcom.squareup.pollexor.ThumborUrlBuilder$HorizontalAlign;", &PXRThumborUrlBuilder_HorizontalAlignEnum_CENTER,  },
    { "RIGHT", "RIGHT", 0x4019, "Lcom.squareup.pollexor.ThumborUrlBuilder$HorizontalAlign;", &PXRThumborUrlBuilder_HorizontalAlignEnum_RIGHT,  },
    { "value_", NULL, 0x10, "Ljava.lang.String;", NULL,  },
  };
  static const char *superclass_type_args[] = {"Lcom.squareup.pollexor.ThumborUrlBuilder$HorizontalAlign;"};
  static const J2ObjcClassInfo _PXRThumborUrlBuilder_HorizontalAlignEnum = { 1, "HorizontalAlign", "com.squareup.pollexor", "ThumborUrlBuilder", 0x4019, 1, methods, 4, fields, 1, superclass_type_args};
  return &_PXRThumborUrlBuilder_HorizontalAlignEnum;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PXRThumborUrlBuilder_HorizontalAlignEnum)

BOOL PXRThumborUrlBuilder_VerticalAlignEnum_initialized = NO;

PXRThumborUrlBuilder_VerticalAlignEnum *PXRThumborUrlBuilder_VerticalAlignEnum_values_[3];

@implementation PXRThumborUrlBuilder_VerticalAlignEnum

- (instancetype)initWithNSString:(NSString *)value
                    withNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  if (self = [super initWithNSString:__name withInt:__ordinal]) {
    PXRThumborUrlBuilder_VerticalAlignEnum_set_value_(self, value);
  }
  return self;
}

IOSObjectArray *PXRThumborUrlBuilder_VerticalAlignEnum_values() {
  PXRThumborUrlBuilder_VerticalAlignEnum_init();
  return [IOSObjectArray arrayWithObjects:PXRThumborUrlBuilder_VerticalAlignEnum_values_ count:3 type:PXRThumborUrlBuilder_VerticalAlignEnum_class_()];
}
+ (IOSObjectArray *)values {
  return PXRThumborUrlBuilder_VerticalAlignEnum_values();
}

+ (PXRThumborUrlBuilder_VerticalAlignEnum *)valueOfWithNSString:(NSString *)name {
  return PXRThumborUrlBuilder_VerticalAlignEnum_valueOfWithNSString_(name);
}

PXRThumborUrlBuilder_VerticalAlignEnum *PXRThumborUrlBuilder_VerticalAlignEnum_valueOfWithNSString_(NSString *name) {
  PXRThumborUrlBuilder_VerticalAlignEnum_init();
  for (int i = 0; i < 3; i++) {
    PXRThumborUrlBuilder_VerticalAlignEnum *e = PXRThumborUrlBuilder_VerticalAlignEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [PXRThumborUrlBuilder_VerticalAlignEnum class]) {
    PXRThumborUrlBuilder_VerticalAlignEnum_TOP = [[PXRThumborUrlBuilder_VerticalAlignEnum alloc] initWithNSString:@"top" withNSString:@"TOP" withInt:0];
    PXRThumborUrlBuilder_VerticalAlignEnum_MIDDLE = [[PXRThumborUrlBuilder_VerticalAlignEnum alloc] initWithNSString:@"middle" withNSString:@"MIDDLE" withInt:1];
    PXRThumborUrlBuilder_VerticalAlignEnum_BOTTOM = [[PXRThumborUrlBuilder_VerticalAlignEnum alloc] initWithNSString:@"bottom" withNSString:@"BOTTOM" withInt:2];
    J2OBJC_SET_INITIALIZED(PXRThumborUrlBuilder_VerticalAlignEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:withInt:", "VerticalAlign", NULL, 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TOP", "TOP", 0x4019, "Lcom.squareup.pollexor.ThumborUrlBuilder$VerticalAlign;", &PXRThumborUrlBuilder_VerticalAlignEnum_TOP,  },
    { "MIDDLE", "MIDDLE", 0x4019, "Lcom.squareup.pollexor.ThumborUrlBuilder$VerticalAlign;", &PXRThumborUrlBuilder_VerticalAlignEnum_MIDDLE,  },
    { "BOTTOM", "BOTTOM", 0x4019, "Lcom.squareup.pollexor.ThumborUrlBuilder$VerticalAlign;", &PXRThumborUrlBuilder_VerticalAlignEnum_BOTTOM,  },
    { "value_", NULL, 0x10, "Ljava.lang.String;", NULL,  },
  };
  static const char *superclass_type_args[] = {"Lcom.squareup.pollexor.ThumborUrlBuilder$VerticalAlign;"};
  static const J2ObjcClassInfo _PXRThumborUrlBuilder_VerticalAlignEnum = { 1, "VerticalAlign", "com.squareup.pollexor", "ThumborUrlBuilder", 0x4019, 1, methods, 4, fields, 1, superclass_type_args};
  return &_PXRThumborUrlBuilder_VerticalAlignEnum;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PXRThumborUrlBuilder_VerticalAlignEnum)

BOOL PXRThumborUrlBuilder_TrimPixelColorEnum_initialized = NO;

PXRThumborUrlBuilder_TrimPixelColorEnum *PXRThumborUrlBuilder_TrimPixelColorEnum_values_[2];

@implementation PXRThumborUrlBuilder_TrimPixelColorEnum

- (instancetype)initWithNSString:(NSString *)value
                    withNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  if (self = [super initWithNSString:__name withInt:__ordinal]) {
    PXRThumborUrlBuilder_TrimPixelColorEnum_set_value_(self, value);
  }
  return self;
}

IOSObjectArray *PXRThumborUrlBuilder_TrimPixelColorEnum_values() {
  PXRThumborUrlBuilder_TrimPixelColorEnum_init();
  return [IOSObjectArray arrayWithObjects:PXRThumborUrlBuilder_TrimPixelColorEnum_values_ count:2 type:PXRThumborUrlBuilder_TrimPixelColorEnum_class_()];
}
+ (IOSObjectArray *)values {
  return PXRThumborUrlBuilder_TrimPixelColorEnum_values();
}

+ (PXRThumborUrlBuilder_TrimPixelColorEnum *)valueOfWithNSString:(NSString *)name {
  return PXRThumborUrlBuilder_TrimPixelColorEnum_valueOfWithNSString_(name);
}

PXRThumborUrlBuilder_TrimPixelColorEnum *PXRThumborUrlBuilder_TrimPixelColorEnum_valueOfWithNSString_(NSString *name) {
  PXRThumborUrlBuilder_TrimPixelColorEnum_init();
  for (int i = 0; i < 2; i++) {
    PXRThumborUrlBuilder_TrimPixelColorEnum *e = PXRThumborUrlBuilder_TrimPixelColorEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [PXRThumborUrlBuilder_TrimPixelColorEnum class]) {
    PXRThumborUrlBuilder_TrimPixelColorEnum_TOP_LEFT = [[PXRThumborUrlBuilder_TrimPixelColorEnum alloc] initWithNSString:@"top-left" withNSString:@"TOP_LEFT" withInt:0];
    PXRThumborUrlBuilder_TrimPixelColorEnum_BOTTOM_RIGHT = [[PXRThumborUrlBuilder_TrimPixelColorEnum alloc] initWithNSString:@"bottom-right" withNSString:@"BOTTOM_RIGHT" withInt:1];
    J2OBJC_SET_INITIALIZED(PXRThumborUrlBuilder_TrimPixelColorEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:withInt:", "TrimPixelColor", NULL, 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TOP_LEFT", "TOP_LEFT", 0x4019, "Lcom.squareup.pollexor.ThumborUrlBuilder$TrimPixelColor;", &PXRThumborUrlBuilder_TrimPixelColorEnum_TOP_LEFT,  },
    { "BOTTOM_RIGHT", "BOTTOM_RIGHT", 0x4019, "Lcom.squareup.pollexor.ThumborUrlBuilder$TrimPixelColor;", &PXRThumborUrlBuilder_TrimPixelColorEnum_BOTTOM_RIGHT,  },
    { "value_", NULL, 0x10, "Ljava.lang.String;", NULL,  },
  };
  static const char *superclass_type_args[] = {"Lcom.squareup.pollexor.ThumborUrlBuilder$TrimPixelColor;"};
  static const J2ObjcClassInfo _PXRThumborUrlBuilder_TrimPixelColorEnum = { 1, "TrimPixelColor", "com.squareup.pollexor", "ThumborUrlBuilder", 0x4019, 1, methods, 3, fields, 1, superclass_type_args};
  return &_PXRThumborUrlBuilder_TrimPixelColorEnum;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PXRThumborUrlBuilder_TrimPixelColorEnum)

BOOL PXRThumborUrlBuilder_ImageFormatEnum_initialized = NO;

PXRThumborUrlBuilder_ImageFormatEnum *PXRThumborUrlBuilder_ImageFormatEnum_values_[4];

@implementation PXRThumborUrlBuilder_ImageFormatEnum

- (instancetype)initWithNSString:(NSString *)value
                    withNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  if (self = [super initWithNSString:__name withInt:__ordinal]) {
    PXRThumborUrlBuilder_ImageFormatEnum_set_value_(self, value);
  }
  return self;
}

IOSObjectArray *PXRThumborUrlBuilder_ImageFormatEnum_values() {
  PXRThumborUrlBuilder_ImageFormatEnum_init();
  return [IOSObjectArray arrayWithObjects:PXRThumborUrlBuilder_ImageFormatEnum_values_ count:4 type:PXRThumborUrlBuilder_ImageFormatEnum_class_()];
}
+ (IOSObjectArray *)values {
  return PXRThumborUrlBuilder_ImageFormatEnum_values();
}

+ (PXRThumborUrlBuilder_ImageFormatEnum *)valueOfWithNSString:(NSString *)name {
  return PXRThumborUrlBuilder_ImageFormatEnum_valueOfWithNSString_(name);
}

PXRThumborUrlBuilder_ImageFormatEnum *PXRThumborUrlBuilder_ImageFormatEnum_valueOfWithNSString_(NSString *name) {
  PXRThumborUrlBuilder_ImageFormatEnum_init();
  for (int i = 0; i < 4; i++) {
    PXRThumborUrlBuilder_ImageFormatEnum *e = PXRThumborUrlBuilder_ImageFormatEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [PXRThumborUrlBuilder_ImageFormatEnum class]) {
    PXRThumborUrlBuilder_ImageFormatEnum_GIF = [[PXRThumborUrlBuilder_ImageFormatEnum alloc] initWithNSString:@"gif" withNSString:@"GIF" withInt:0];
    PXRThumborUrlBuilder_ImageFormatEnum_JPEG = [[PXRThumborUrlBuilder_ImageFormatEnum alloc] initWithNSString:@"jpeg" withNSString:@"JPEG" withInt:1];
    PXRThumborUrlBuilder_ImageFormatEnum_PNG = [[PXRThumborUrlBuilder_ImageFormatEnum alloc] initWithNSString:@"png" withNSString:@"PNG" withInt:2];
    PXRThumborUrlBuilder_ImageFormatEnum_WEBP = [[PXRThumborUrlBuilder_ImageFormatEnum alloc] initWithNSString:@"webp" withNSString:@"WEBP" withInt:3];
    J2OBJC_SET_INITIALIZED(PXRThumborUrlBuilder_ImageFormatEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:withInt:", "ImageFormat", NULL, 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "GIF", "GIF", 0x4019, "Lcom.squareup.pollexor.ThumborUrlBuilder$ImageFormat;", &PXRThumborUrlBuilder_ImageFormatEnum_GIF,  },
    { "JPEG", "JPEG", 0x4019, "Lcom.squareup.pollexor.ThumborUrlBuilder$ImageFormat;", &PXRThumborUrlBuilder_ImageFormatEnum_JPEG,  },
    { "PNG", "PNG", 0x4019, "Lcom.squareup.pollexor.ThumborUrlBuilder$ImageFormat;", &PXRThumborUrlBuilder_ImageFormatEnum_PNG,  },
    { "WEBP", "WEBP", 0x4019, "Lcom.squareup.pollexor.ThumborUrlBuilder$ImageFormat;", &PXRThumborUrlBuilder_ImageFormatEnum_WEBP,  },
    { "value_", NULL, 0x10, "Ljava.lang.String;", NULL,  },
  };
  static const char *superclass_type_args[] = {"Lcom.squareup.pollexor.ThumborUrlBuilder$ImageFormat;"};
  static const J2ObjcClassInfo _PXRThumborUrlBuilder_ImageFormatEnum = { 1, "ImageFormat", "com.squareup.pollexor", "ThumborUrlBuilder", 0x4019, 1, methods, 5, fields, 1, superclass_type_args};
  return &_PXRThumborUrlBuilder_ImageFormatEnum;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PXRThumborUrlBuilder_ImageFormatEnum)
