//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrefonseca/Documents/PodsFolders/pollexor/src/main/java/com/squareup/pollexor/Thumbor.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/squareup/pollexor/Thumbor.h"
#include "com/squareup/pollexor/ThumborUrlBuilder.h"
#include "java/lang/IllegalArgumentException.h"

@interface PXRThumbor () {
 @public
  NSString *host_;
  NSString *key_;
}

- (instancetype)initWithNSString:(NSString *)host
                    withNSString:(NSString *)key;

@end

J2OBJC_FIELD_SETTER(PXRThumbor, host_, NSString *)
J2OBJC_FIELD_SETTER(PXRThumbor, key_, NSString *)

__attribute__((unused)) static void PXRThumbor_initWithNSString_withNSString_(PXRThumbor *self, NSString *host, NSString *key);

__attribute__((unused)) static PXRThumbor *new_PXRThumbor_initWithNSString_withNSString_(NSString *host, NSString *key) NS_RETURNS_RETAINED;

__attribute__((unused)) static PXRThumbor *create_PXRThumbor_initWithNSString_withNSString_(NSString *host, NSString *key);

@implementation PXRThumbor

+ (PXRThumbor *)createWithNSString:(NSString *)host {
  return PXRThumbor_createWithNSString_(host);
}

+ (PXRThumbor *)createWithNSString:(NSString *)host
                      withNSString:(NSString *)key {
  return PXRThumbor_createWithNSString_withNSString_(host, key);
}

- (instancetype)initWithNSString:(NSString *)host
                    withNSString:(NSString *)key {
  PXRThumbor_initWithNSString_withNSString_(self, host, key);
  return self;
}

- (NSString *)getHost {
  return host_;
}

- (NSString *)getKey {
  return key_;
}

- (PXRThumborUrlBuilder *)buildImageWithNSString:(NSString *)image {
  if (image == nil || ((jint) [image length]) == 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid image.");
  }
  return create_PXRThumborUrlBuilder_initWithNSString_withNSString_withNSString_(host_, key_, image);
}

- (void)dealloc {
  RELEASE_(host_);
  RELEASE_(key_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LPXRThumbor;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LPXRThumbor;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LPXRThumborUrlBuilder;", 0x1, 3, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createWithNSString:);
  methods[1].selector = @selector(createWithNSString:withNSString:);
  methods[2].selector = @selector(initWithNSString:withNSString:);
  methods[3].selector = @selector(getHost);
  methods[4].selector = @selector(getKey);
  methods[5].selector = @selector(buildImageWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "host_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "key_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "create", "LNSString;", "LNSString;LNSString;", "buildImage" };
  static const J2ObjcClassInfo _PXRThumbor = { "Thumbor", "com.squareup.pollexor", ptrTable, methods, fields, 7, 0x11, 6, 2, -1, -1, -1, -1, -1 };
  return &_PXRThumbor;
}

@end

PXRThumbor *PXRThumbor_createWithNSString_(NSString *host) {
  PXRThumbor_initialize();
  return create_PXRThumbor_initWithNSString_withNSString_(host, nil);
}

PXRThumbor *PXRThumbor_createWithNSString_withNSString_(NSString *host, NSString *key) {
  PXRThumbor_initialize();
  if (key == nil || ((jint) [key length]) == 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Key must not be blank.");
  }
  return create_PXRThumbor_initWithNSString_withNSString_(host, key);
}

void PXRThumbor_initWithNSString_withNSString_(PXRThumbor *self, NSString *host, NSString *key) {
  NSObject_init(self);
  if (host == nil || ((jint) [host length]) == 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Host must not be blank.");
  }
  if (![host hasSuffix:@"/"]) {
    JreStrAppend(&host, "$", @"/");
  }
  JreStrongAssign(&self->host_, host);
  JreStrongAssign(&self->key_, key);
}

PXRThumbor *new_PXRThumbor_initWithNSString_withNSString_(NSString *host, NSString *key) {
  J2OBJC_NEW_IMPL(PXRThumbor, initWithNSString_withNSString_, host, key)
}

PXRThumbor *create_PXRThumbor_initWithNSString_withNSString_(NSString *host, NSString *key) {
  J2OBJC_CREATE_IMPL(PXRThumbor, initWithNSString_withNSString_, host, key)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PXRThumbor)
