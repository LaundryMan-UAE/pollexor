//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/3rdParty/pollexor/src/main/java/com/squareup/pollexor/Thumbor.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/squareup/pollexor/Thumbor.h"
#include "com/squareup/pollexor/ThumborUrlBuilder.h"
#include "java/lang/IllegalArgumentException.h"

@interface PXRThumbor () {
 @public
  NSString *host_;
  NSString *key_;
}
- (instancetype)initWithNSString:(NSString *)host
                    withNSString:(NSString *)key;
@end

J2OBJC_FIELD_SETTER(PXRThumbor, host_, NSString *)
J2OBJC_FIELD_SETTER(PXRThumbor, key_, NSString *)

@implementation PXRThumbor

+ (PXRThumbor *)createWithNSString:(NSString *)host {
  return PXRThumbor_createWithNSString_(host);
}

+ (PXRThumbor *)createWithNSString:(NSString *)host
                      withNSString:(NSString *)key {
  return PXRThumbor_createWithNSString_withNSString_(host, key);
}

- (instancetype)initWithNSString:(NSString *)host
                    withNSString:(NSString *)key {
  if (self = [super init]) {
    if (host == nil || ((jint) [host length]) == 0) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Host must not be blank."] autorelease];
    }
    if (![((NSString *) nil_chk(host)) hasSuffix:@"/"]) {
      host = JreStrcat("$C", host, '/');
    }
    PXRThumbor_set_host_(self, host);
    PXRThumbor_set_key_(self, key);
  }
  return self;
}

- (NSString *)getHost {
  return host_;
}

- (NSString *)getKey {
  return key_;
}

- (PXRThumborUrlBuilder *)buildImageWithNSString:(NSString *)image {
  if (image == nil || ((jint) [image length]) == 0) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Invalid image."] autorelease];
  }
  return [[[PXRThumborUrlBuilder alloc] initWithNSString:host_ withNSString:key_ withNSString:image] autorelease];
}

- (void)dealloc {
  RELEASE_(host_);
  RELEASE_(key_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(PXRThumbor *)other {
  [super copyAllFieldsTo:other];
  PXRThumbor_set_host_(other, host_);
  PXRThumbor_set_key_(other, key_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "createWithNSString:", "create", "Lcom.squareup.pollexor.Thumbor;", 0x9, NULL },
    { "createWithNSString:withNSString:", "create", "Lcom.squareup.pollexor.Thumbor;", 0x9, NULL },
    { "initWithNSString:withNSString:", "Thumbor", NULL, 0x2, NULL },
    { "getHost", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getKey", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "buildImageWithNSString:", "buildImage", "Lcom.squareup.pollexor.ThumborUrlBuilder;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "host_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
    { "key_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
  };
  static const J2ObjcClassInfo _PXRThumbor = { 1, "Thumbor", "com.squareup.pollexor", NULL, 0x11, 6, methods, 2, fields, 0, NULL};
  return &_PXRThumbor;
}

@end

PXRThumbor *PXRThumbor_createWithNSString_(NSString *host) {
  PXRThumbor_init();
  return [[[PXRThumbor alloc] initWithNSString:host withNSString:nil] autorelease];
}

PXRThumbor *PXRThumbor_createWithNSString_withNSString_(NSString *host, NSString *key) {
  PXRThumbor_init();
  if (key == nil || ((jint) [key length]) == 0) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Key must not be blank."] autorelease];
  }
  return [[[PXRThumbor alloc] initWithNSString:host withNSString:key] autorelease];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PXRThumbor)
